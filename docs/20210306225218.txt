1:"$Sreact.fragment"
2:I[9119,["119","static/chunks/119-2ee48d1f375d3fd9.js","974","static/chunks/app/page-ee49d1414c09869d.js"],""]
3:I[730,[],""]
4:I[2392,[],""]
6:I[3811,[],"OutletBoundary"]
8:I[4338,[],"AsyncMetadataOutlet"]
a:I[3811,[],"ViewportBoundary"]
c:I[3811,[],"MetadataBoundary"]
d:"$Sreact.suspense"
f:I[9426,[],""]
:HL["/_next/static/css/5e22d3fe14facb50.css","style"]
0:{"P":null,"b":"OVt0H6to9QSgb-YS8ef-u","p":"","c":["","docs","20210306225218"],"i":false,"f":[[["",{"children":["docs",{"children":[["slug","20210306225218","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/5e22d3fe14facb50.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"ja","children":["$","body",null,{"style":{"backgroundColor":"ghostwhite","margin":0,"minHeight":"100vh"},"children":[["$","header",null,{"style":{"padding":"1rem 0","marginBottom":"0.25rem"},"children":["$","div",null,{"style":{"maxWidth":"1000px","margin":"0 auto","padding":"0 2rem"},"children":["$","$L2",null,{"href":"/","style":{"fontSize":"1.5rem","fontWeight":"bold","textDecoration":"none","color":"#333"},"children":"MyDocs"}]}]}],["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]]}]}]]}],{"children":["docs",["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["slug","20210306225218","d"],["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L5",null,["$","$L6",null,{"children":["$L7",["$","$L8",null,{"promise":"$@9"}]]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,[["$","$La",null,{"children":"$Lb"}],null],["$","$Lc",null,{"children":["$","div",null,{"hidden":true,"children":["$","$d",null,{"fallback":null,"children":"$Le"}]}]}]]}],false]],"m":"$undefined","G":["$f",[]],"s":false,"S":true}
10:T3b01,<h2>Docker</h2>
<p><code>Dockerfile</code> を元にイメージを構築する。</p>
<h3>build</h3>
<p><code>Dockerfile</code> が存在するディレクトリで実行する。</p>
<pre><code class="hljs language-bash">$ docker build .
</code></pre>
<p><code>-f</code> オプションを使うことで Dockerfile のパスを指定できる。</p>
<pre><code class="hljs language-bash">$ docker build -f /path/to/Dockerfile .
</code></pre>
<h3>FROM</h3>
<p>ベースイメージを指定する。</p>
<pre><code class="hljs language-Dockerfile">FROM &#x3C;image>[:&#x3C;tag>][AS &#x3C;name>]
</code></pre>
<p><code>AS &#x3C;name></code> でステージに名前を付けて、以降の <code>FROM</code> と <code>COPY --from=&#x3C;name></code> 命令で構築イメージを参照できる。</p>
<h3>RUN</h3>
<p>シェルとして実行される。</p>
<pre><code class="hljs language-Dockerfile">RUN /bin/sh -c 'source $HOME/.bashrc;' \
echo $HOME
</code></pre>
<p>1 行で書く場合。</p>
<pre><code class="hljs language-Dockerfile">RUN /bin/sh -c 'source $HOME/.bashrc; echo $HOME'
</code></pre>
<p><code>bash/sh</code> 以外のシェルを使う場合は <code>exec</code> 形式でシェルに引数を渡す。</p>
<pre><code class="hljs language-Dockerfile">RUN ["/bin/bash", "-c", "echo hello"]
</code></pre>
<p><code>exec</code> 形式で書く場合は json 配列として扱わるため <code>""</code> で囲む必要がある。</p>
<h3>CMD</h3>
<p><code>Dockerfile</code> 内の <code>CMD</code> 命令は 1 つのみ。複数あっても最後の <code>CMD</code> 命令のみが実行される。
<strong>CMD の目的はコンテナの実行時のデフォルトの処理を指定する</strong></p>
<pre><code class="hljs language-Dockerfile">FROM ubuntu
CMD ["/usr/bin/wc", "--help"]
</code></pre>
<h3>ADD / COPY</h3>
<p><code>&#x3C;src></code> で指定したファイル、ディレクトリをコンテナ内の <code>&#x3C;dest></code> にコピーする。
ローカルのファイルをコンテナにコピーしたい場合は <code>COPY</code> を使う。
<code>ADD</code> はローカルでの圧縮ファイルの展開やリモートファイルの展開したい場面で使う。</p>
<pre><code class="hljs language-Dockerfile">ADD [--chown=&#x3C;ユーザ>:&#x3C;グループ>] &#x3C;src> &#x3C;dest>
COPY [--chown=&#x3C;ユーザ>:&#x3C;グループ>] &#x3C;src> &#x3C;dest>
</code></pre>
<h3>EXPOSE</h3>
<p>コンテナが接続するためのリッスンするポートを指定する。</p>
<pre><code class="hljs language-Dockerfile">EXPOSE 80
</code></pre>
<p>実際にはポートの公開は行われない。ドキュメント的な用途として使われる。
実際に公開して使うには、 <code>docker run</code> の際にフラグをつける。</p>
<pre><code class="hljs language-bash">$ docker run --<span class="hljs-built_in">rm</span> -it -p 80:80 &#x3C;image> bash
</code></pre>
<h3>ENV</h3>
<p>環境変数の設定をする。</p>
<pre><code class="hljs language-Dockerfile">ENV &#x3C;key>=&#x3C;value>
</code></pre>
<p>環境変数は、 <code>Dockerfile</code> 内の変数として使える。
使い方は、 <code>$variable_name</code> もしくは、 <code>${variable_name}</code></p>
<pre><code class="hljs language-Dockerfile">FROM &#x3C;image>
ENV FOO=/bar
WORKDIR ${FOO} # WORKDIR /bar
</code></pre>
<h3>ENTRYPOINT</h3>
<p>最適な使い方はイメージに対してメインのコマンドを設定しておき、 <code>CMD</code> を使ってデフォルトフラグを指定する。</p>
<pre><code class="hljs language-Dockerfile">ENTRYPOINT ["go"]
CMD ["--help"]
</code></pre>
<p>パラメータを指定して起動することでコマンドの実行ができる。</p>
<pre><code class="hljs language-bash">$ docker run &#x3C;image> run main.go
</code></pre>
<h3>VOLUME</h3>
<p>コンテナによって作成されるファイルやフォルダの公開に使う。イメージの可変的な部分、ユーザが設定可能な部分について使う。</p>
<h3>USER</h3>
<p>非 root ユーザで実行可能な場合は <code>USER</code> を使ってユーザの変更する。</p>
<pre><code class="hljs language-Dockerfile">USER &#x3C;ユーザ>[:&#x3C;グループ>]
</code></pre>
<h3>WORKDIR</h3>
<p>Dockerfile で続く <code>RUN</code>、 <code>CMD</code>、 <code>ENTRYPOINT</code>、 <code>COPY / ADD</code> の命令の処理時で使う作業ディレクトリを指定する。</p>
<h3>ARG</h3>
<p><code>build</code> 時にユーザが渡せる変数を定義する。
構築時には <code>docker build --build-arg &#x3C;変数名>=&#x3C;値></code> を指定する。</p>
<pre><code class="hljs language-Dockerfile">ARG &#x3C;name>[=&#x3C;デフォルト値>]
</code></pre>
<h2>docker-compose</h2>
<p>サービスを定義する。</p>
<h3>build</h3>
<p>ビルド時に適用される。</p>
<pre><code class="hljs language-yml"><span class="hljs-attr">services:</span>
  <span class="hljs-attr">webapp:</span>
    <span class="hljs-attr">build:</span> <span class="hljs-string">./dir</span>
</code></pre>
<p><code>context</code> でパスを指定し, <code>Dockerfile</code> や <code>args</code> も指定できる。</p>
<pre><code class="hljs language-yml"><span class="hljs-attr">services:</span>
  <span class="hljs-attr">webapp:</span>
    <span class="hljs-attr">build:</span>
      <span class="hljs-attr">context:</span> <span class="hljs-string">./dir</span>
      <span class="hljs-attr">dockerfile:</span> <span class="hljs-string">Dockerfile-alternate</span>
      <span class="hljs-attr">args:</span>
        <span class="hljs-attr">buildno:</span> <span class="hljs-number">1</span>
</code></pre>
<p><code>image</code> 名と <code>tag</code> を指定できる。</p>
<pre><code class="hljs language-yml"><span class="hljs-attr">build:</span> <span class="hljs-string">./dir</span>
<span class="hljs-attr">image:</span> <span class="hljs-string">webapp:tag</span>
</code></pre>
<h3>context</h3>
<p><code>Dockerfile</code> を含むディレクトリへのパスか、 git リポジトリの URL を指定する。</p>
<pre><code class="hljs language-yml"><span class="hljs-attr">build:</span>
  <span class="hljs-attr">context:</span> <span class="hljs-string">./dir</span>
</code></pre>
<h3>dockerfile</h3>
<p>別の <code>Dockerfile</code> を指定する。この場合、ビルドパスを同時に指定する必要がある。</p>
<pre><code class="hljs language-yml"><span class="hljs-attr">build:</span>
  <span class="hljs-attr">context:</span> <span class="hljs-string">.</span>
  <span class="hljs-attr">dockerfile:</span> <span class="hljs-string">Dockerfile-alternate</span>
</code></pre>
<h3>args</h3>
<p>ビルド時にのみ有効な環境変数を設定する。
個々をマッピングするか、リストで書く.ブール値はクォートで囲む。</p>
<pre><code class="hljs language-yml"><span class="hljs-attr">build:</span>
  <span class="hljs-attr">context:</span> <span class="hljs-string">.</span>
  <span class="hljs-attr">args:</span>
    <span class="hljs-attr">buildno:</span> <span class="hljs-number">1</span>
    <span class="hljs-attr">gitcommithash:</span> <span class="hljs-string">abc123</span>
</code></pre>
<pre><code class="hljs language-yml"><span class="hljs-attr">build:</span>
  <span class="hljs-attr">context:</span> <span class="hljs-string">.</span>
  <span class="hljs-attr">args:</span>
    <span class="hljs-bullet">-</span> <span class="hljs-string">buildno=1</span>
    <span class="hljs-bullet">-</span> <span class="hljs-string">gitcommithash=abc123</span>
</code></pre>
<h3>command</h3>
<p>デフォルトのコマンドを上書きする。</p>
<pre><code class="hljs language-yml"><span class="hljs-attr">command:</span> <span class="hljs-string">bundle</span> <span class="hljs-string">exec</span> <span class="hljs-string">thin</span> <span class="hljs-string">-p</span> <span class="hljs-number">3000</span>
</code></pre>
<p>リスト形式も可能。</p>
<pre><code class="hljs language-yml"><span class="hljs-attr">command:</span> [<span class="hljs-string">"bundle"</span>, <span class="hljs-string">"exec"</span>, <span class="hljs-string">"thin"</span>, <span class="hljs-string">"-p"</span>, <span class="hljs-string">"3000"</span>]
</code></pre>
<h3>depends_on</h3>
<p>サービス起動の依存関係を表す。
以下の場合、 db と redis の起動後に web が起動する。</p>
<pre><code class="hljs language-yml"><span class="hljs-attr">version:</span> <span class="hljs-string">"3.9"</span>
<span class="hljs-attr">services:</span>
  <span class="hljs-attr">web:</span>
    <span class="hljs-attr">build:</span> <span class="hljs-string">.</span>
    <span class="hljs-attr">depends_on:</span>
      <span class="hljs-bullet">-</span> <span class="hljs-string">db</span>
      <span class="hljs-bullet">-</span> <span class="hljs-string">redis</span>
  <span class="hljs-attr">redis:</span>
    <span class="hljs-attr">image:</span> <span class="hljs-string">redis</span>
  <span class="hljs-attr">db:</span>
    <span class="hljs-attr">image:</span> <span class="hljs-string">postgres</span>
</code></pre>
<h3>entrypoint</h3>
<p>デフォルトのエントリーポイントを上書きする。</p>
<pre><code class="hljs language-yml"><span class="hljs-attr">entrypoint:</span> <span class="hljs-string">/code/entrypoint.sh</span>
</code></pre>
<p>リスト形式も可能。</p>
<pre><code class="hljs language-yml"><span class="hljs-attr">entrypoint:</span> [<span class="hljs-string">"php"</span>, <span class="hljs-string">"-d"</span>, <span class="hljs-string">"memry_limit=1"</span>, <span class="hljs-string">"vendor/bin/phpunit"</span>]
</code></pre>
<h3>environment</h3>
<p>環境変数を追加する。
個々をマッピングするか,リストで書く.ブール値はクォートで囲む。</p>
<pre><code class="hljs language-yml"><span class="hljs-attr">environment:</span>
  <span class="hljs-attr">RACK_ENV:</span> <span class="hljs-string">development</span>
  <span class="hljs-attr">SHOW:</span> <span class="hljs-string">'true'</span>
  <span class="hljs-attr">SESSION_SECRET:</span>
</code></pre>
<pre><code class="hljs language-yml"><span class="hljs-attr">environment:</span>
  <span class="hljs-bullet">-</span> <span class="hljs-string">RACK_ENV=development</span>
  <span class="hljs-bullet">-</span> <span class="hljs-string">SHOW=true</span>
  <span class="hljs-bullet">-</span> <span class="hljs-string">SESSION_SECRET</span>
</code></pre>
<h3>expose</h3>
<p>ホストマシンにはポートを公開せずに,ポートを expose する.
リンクされたサービスのみアクセス可能。</p>
<pre><code class="hljs language-yml"><span class="hljs-attr">expose:</span>
  <span class="hljs-bullet">-</span> <span class="hljs-string">"3000"</span>
  <span class="hljs-bullet">-</span> <span class="hljs-string">"8000"</span>
</code></pre>
<h3>external_links</h3>
<p>実行する <code>docker-compose.yml</code> 以外から起動されたコンテナをリンクする。
コンテナ名とエイリアス名 (CONTAINER:ALIAS) を指定する。</p>
<pre><code class="hljs language-yml"><span class="hljs-attr">external_links:</span>
  <span class="hljs-bullet">-</span> <span class="hljs-string">redis_1</span>
  <span class="hljs-bullet">-</span> <span class="hljs-string">project_db_1:mysql</span>
</code></pre>
<h3>extra_hosts</h3>
<p>ホスト名をマッピングに追加する。
<code>/etc/hosts</code> に追加される。</p>
<pre><code class="hljs language-yml"><span class="hljs-attr">extra_hosts:</span>
  <span class="hljs-bullet">-</span> <span class="hljs-string">"somehost:162.242.195.82"</span>
</code></pre>
<h3>ports</h3>
<p>公開用のポートを設定する。
ホスト側とコンテナ側のポートを指定する( <code>HOST:CONTAINER</code> )。
もしくは、コンテナ側のポートを指定する。</p>
<pre><code class="hljs language-yml"><span class="hljs-attr">ports:</span>
  <span class="hljs-bullet">-</span> <span class="hljs-string">"3000"</span>
  <span class="hljs-bullet">-</span> <span class="hljs-string">"3000-3005"</span>
  <span class="hljs-bullet">-</span> <span class="hljs-string">"8000:8000"</span>
  <span class="hljs-bullet">-</span> <span class="hljs-string">"9090-9091:8080-8081"</span>
  <span class="hljs-bullet">-</span> <span class="hljs-string">"49100:22"</span>
  <span class="hljs-bullet">-</span> <span class="hljs-string">"127.0.0.1:8001:8001"</span>
  <span class="hljs-bullet">-</span> <span class="hljs-string">"127.0.0.1:5000-5010:5000-5010"</span>
  <span class="hljs-bullet">-</span> <span class="hljs-string">"6060:6060/udp"</span>
  <span class="hljs-bullet">-</span> <span class="hljs-string">"12400-12500:1240"</span>
</code></pre>
<h3>volumes</h3>
<p>複数のサービスにわたってボリュームを再利用したい場合、最上位の <code>volumes</code> キーで名前付きボリュームを定義する。
以下の場合、 db サービスのデータディレクトリは、 backup サービスのボリュームにも共有させている。</p>
<pre><code class="hljs language-yml"><span class="hljs-attr">version:</span> <span class="hljs-string">"3.9"</span>
<span class="hljs-attr">services:</span>
  <span class="hljs-attr">db:</span>
    <span class="hljs-attr">image:</span> <span class="hljs-string">db</span>
    <span class="hljs-attr">volumes:</span>
      <span class="hljs-bullet">-</span> <span class="hljs-string">data-volume:/var/lib/db</span>
  <span class="hljs-attr">backup:</span>
    <span class="hljs-attr">image:</span> <span class="hljs-string">backup-service</span>
    <span class="hljs-attr">volumes:</span>
      <span class="hljs-bullet">-</span> <span class="hljs-string">data-volume:/var/lib/backup/data</span>
<span class="hljs-attr">volumes:</span>
  <span class="hljs-attr">data-volume:</span>
</code></pre>
<p>短い書き方では、 <code>[SOURCE:]TARGET[:MODE]</code> と書ける。 <code>ro</code> は <code>readonly</code> 。</p>
<pre><code class="hljs language-yml"><span class="hljs-bullet">-</span> <span class="hljs-string">./cache:/tmp/cache:ro</span>
</code></pre>
<h3>変数の置換</h3>
<p>シェル環境に <code>POSTGRES_VERSION=9.3</code> が定義されていると、 postgres のバージョンは 9.3 になる。</p>
<pre><code class="hljs language-yml"><span class="hljs-attr">db:</span>
  <span class="hljs-attr">image:</span> <span class="hljs-string">"postgres:${POSTGRES_VERSION}"</span>
</code></pre>
<p>環境変数が設定されていない場合は空文字になる。
環境変数のデフォルト値は <code>.env</code> ファイルに設定しておくことができる。</p>
<ul>
<li>${VARIABLE:-default} は VARIABLE がセットされていないか, 空文字のときに <code>default</code> として評価される</li>
<li>${VARIABLE-default} は VARIABLE がセットされているときのみ <code>default</code> として評価される</li>
</ul>5:["$","article",null,{"style":{"maxWidth":"1000px","margin":"0 auto","padding":"0 2rem 2rem"},"children":[["$","h1",null,{"children":"Dockerとdocker-composeのまとめ"}],["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$10"}}]]}]
b:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
7:null
9:{"metadata":[["$","title","0",{"children":"MyDocs"}],["$","meta","1",{"name":"description","content":"A simple SSG blog built with Next.js"}]],"error":null,"digest":"$undefined"}
e:"$9:metadata"
