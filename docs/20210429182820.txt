1:"$Sreact.fragment"
2:I[9119,["119","static/chunks/119-2ee48d1f375d3fd9.js","974","static/chunks/app/page-ee49d1414c09869d.js"],""]
3:I[730,[],""]
4:I[2392,[],""]
6:I[3811,[],"OutletBoundary"]
8:I[4338,[],"AsyncMetadataOutlet"]
a:I[3811,[],"ViewportBoundary"]
c:I[3811,[],"MetadataBoundary"]
d:"$Sreact.suspense"
f:I[9426,[],""]
:HL["/_next/static/css/5e22d3fe14facb50.css","style"]
0:{"P":null,"b":"nvFx_FV4eLnf8EmFzYlmi","p":"","c":["","docs","20210429182820"],"i":false,"f":[[["",{"children":["docs",{"children":[["slug","20210429182820","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/5e22d3fe14facb50.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"ja","children":["$","body",null,{"style":{"backgroundColor":"ghostwhite","margin":0,"minHeight":"100vh"},"children":[["$","header",null,{"style":{"padding":"1rem 0","marginBottom":"0.25rem"},"children":["$","div",null,{"style":{"maxWidth":"1000px","margin":"0 auto","padding":"0 2rem"},"children":["$","$L2",null,{"href":"/","style":{"fontSize":"1.5rem","fontWeight":"bold","textDecoration":"none","color":"#333"},"children":"MyDocs"}]}]}],["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]]}]}]]}],{"children":["docs",["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["slug","20210429182820","d"],["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L5",null,["$","$L6",null,{"children":["$L7",["$","$L8",null,{"promise":"$@9"}]]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,[["$","$La",null,{"children":"$Lb"}],null],["$","$Lc",null,{"children":["$","div",null,{"hidden":true,"children":["$","$d",null,{"fallback":null,"children":"$Le"}]}]}]]}],false]],"m":"$undefined","G":["$f",[]],"s":false,"S":true}
10:T4426,<h2>並列 / 並行 処理</h2>
<ul>
<li>並列処理
<ul>
<li>Parallelism
<ul>
<li>同時に同じ処理が複数走る</li>
</ul>
</li>
</ul>
</li>
<li>並行処理
<ul>
<li>Concurrency
<ul>
<li>同時に色々な処理が走る</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2>channel を使う</h2>
<pre><code class="hljs language-go"><span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> (
	<span class="hljs-string">"fmt"</span>
	<span class="hljs-string">"time"</span>
)

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">process</span><span class="hljs-params">(num <span class="hljs-type">int</span>, str <span class="hljs-type">string</span>)</span></span> {
	<span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &#x3C; num; i++ {
		time.Sleep(<span class="hljs-number">1</span> * time.Second)
		fmt.Println(i, str)
	}
}

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {
	fmt.Println(<span class="hljs-string">"Start"</span>)
	process(<span class="hljs-number">2</span>, <span class="hljs-string">"A"</span>)
	process(<span class="hljs-number">2</span>, <span class="hljs-string">"B"</span>)
	process(<span class="hljs-number">2</span>, <span class="hljs-string">"C"</span>)
	fmt.Println(<span class="hljs-string">"Finish"</span>)
}

<span class="hljs-comment">// Start</span>
<span class="hljs-comment">// 0 A</span>
<span class="hljs-comment">// 1 A</span>
<span class="hljs-comment">// 0 B</span>
<span class="hljs-comment">// 1 B</span>
<span class="hljs-comment">// 0 C</span>
<span class="hljs-comment">// 1 C</span>
<span class="hljs-comment">// Finish</span>
<span class="hljs-comment">// </span>
<span class="hljs-comment">// ________________________________________________________</span>
<span class="hljs-comment">// Executed in    6.30 secs      fish           external</span>
<span class="hljs-comment">//    usr time  192.00 millis  172.00 micros  191.83 millis</span>
<span class="hljs-comment">//    sys time  201.91 millis  759.00 micros  201.15 millis</span>
</code></pre>
<p>process の処理を並列化する。</p>
<pre><code class="hljs language-go"><span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> (
	<span class="hljs-string">"fmt"</span>
	<span class="hljs-string">"time"</span>
)

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">process</span><span class="hljs-params">(num <span class="hljs-type">int</span>, str <span class="hljs-type">string</span>)</span></span> {
	<span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &#x3C; num; i++ {
		time.Sleep(<span class="hljs-number">1</span> * time.Second)
		fmt.Println(i, str)
	}
}


<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {
	chA := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">bool</span>)
	chB := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">bool</span>)
	chC := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">bool</span>)
	fmt.Println(<span class="hljs-string">"Start"</span>)

	<span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> {
		process(<span class="hljs-number">2</span>, <span class="hljs-string">"A"</span>)
		chA &#x3C;- <span class="hljs-literal">true</span>
	}()

	<span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> {
		process(<span class="hljs-number">2</span>, <span class="hljs-string">"B"</span>)
		chB &#x3C;- <span class="hljs-literal">true</span>
	}()

	<span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> {
		process(<span class="hljs-number">2</span>, <span class="hljs-string">"C"</span>)
		chC &#x3C;- <span class="hljs-literal">true</span>
	}()

	&#x3C;-chA
	&#x3C;-chB
	&#x3C;-chC

	fmt.Println(<span class="hljs-string">"Finish"</span>)
}

<span class="hljs-comment">// Start</span>
<span class="hljs-comment">// 0 B</span>
<span class="hljs-comment">// 0 A</span>
<span class="hljs-comment">// 0 C</span>
<span class="hljs-comment">// 1 C</span>
<span class="hljs-comment">// 1 A</span>
<span class="hljs-comment">// 1 B</span>
<span class="hljs-comment">// Finish</span>
<span class="hljs-comment">// </span>
<span class="hljs-comment">// ________________________________________________________</span>
<span class="hljs-comment">// Executed in    2.29 secs      fish           external</span>
<span class="hljs-comment">//    usr time  194.02 millis  178.00 micros  193.84 millis</span>
<span class="hljs-comment">//    sys time  207.43 millis  862.00 micros  206.57 millis</span>
</code></pre>
<h2>sync.WaitGroup を使う</h2>
<pre><code class="hljs language-go"><span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> <span class="hljs-string">"fmt"</span>

<span class="hljs-keyword">type</span> Item <span class="hljs-keyword">struct</span> {
	Id   <span class="hljs-type">int</span>
	Name <span class="hljs-type">string</span>
}

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">execLoop</span><span class="hljs-params">(list []Item)</span></span> {
	<span class="hljs-keyword">for</span> _, item := <span class="hljs-keyword">range</span> list {
		doSomething(item)
	}
}

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">doSomething</span><span class="hljs-params">(item Item)</span></span> {
	item.Id += <span class="hljs-number">10</span>
	fmt.Println(item)
}

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {
	list := []Item{
		{Id: <span class="hljs-number">1</span>, Name: <span class="hljs-string">"item1"</span>},
		{Id: <span class="hljs-number">2</span>, Name: <span class="hljs-string">"item2"</span>},
		{Id: <span class="hljs-number">3</span>, Name: <span class="hljs-string">"item3"</span>},
		{Id: <span class="hljs-number">4</span>, Name: <span class="hljs-string">"item4"</span>},
		{Id: <span class="hljs-number">5</span>, Name: <span class="hljs-string">"item5"</span>},
	}

	execLoop(list)
}

<span class="hljs-comment">// {11 item1}</span>
<span class="hljs-comment">// {12 item2}</span>
<span class="hljs-comment">// {13 item3}</span>
<span class="hljs-comment">// {14 item4}</span>
<span class="hljs-comment">// {15 item5}</span>
</code></pre>
<p>ループ内の処理を並列化する。</p>
<pre><code class="hljs language-go"><span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> (
	<span class="hljs-string">"fmt"</span>
	<span class="hljs-string">"sync"</span>
)

<span class="hljs-keyword">type</span> Item <span class="hljs-keyword">struct</span> {
	Id   <span class="hljs-type">int</span>
	Name <span class="hljs-type">string</span>
}

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">execLoop</span><span class="hljs-params">(list []Item)</span></span> {
	<span class="hljs-keyword">var</span> wg sync.WaitGroup
	<span class="hljs-keyword">for</span> _, item := <span class="hljs-keyword">range</span> list {
		wg.Add(<span class="hljs-number">1</span>)
		<span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(item2 Item)</span></span> {
			<span class="hljs-keyword">defer</span> wg.Done()
			doSomething(item2)
		}(item)
	}
	wg.Wait()
}

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">doSomething</span><span class="hljs-params">(item Item)</span></span> {
	item.Id += <span class="hljs-number">10</span>
	fmt.Println(item)
}

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {
	list := []Item{
		{Id: <span class="hljs-number">1</span>, Name: <span class="hljs-string">"item1"</span>},
		{Id: <span class="hljs-number">2</span>, Name: <span class="hljs-string">"item2"</span>},
		{Id: <span class="hljs-number">3</span>, Name: <span class="hljs-string">"item3"</span>},
		{Id: <span class="hljs-number">4</span>, Name: <span class="hljs-string">"item4"</span>},
		{Id: <span class="hljs-number">5</span>, Name: <span class="hljs-string">"item5"</span>},
	}

	execLoop(list)
}

<span class="hljs-comment">// {15 item5}</span>
<span class="hljs-comment">// {11 item1}</span>
<span class="hljs-comment">// {14 item4}</span>
<span class="hljs-comment">// {13 item3}</span>
<span class="hljs-comment">// {12 item2}</span>
</code></pre>
<h2>sync.Mutex を使う</h2>
<pre><code class="hljs language-go"><span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> <span class="hljs-string">"fmt"</span>

<span class="hljs-keyword">type</span> myClass <span class="hljs-keyword">struct</span> {
	AttributeName <span class="hljs-type">string</span>
}

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {
	sourceSlice := <span class="hljs-built_in">make</span>([]myClass, <span class="hljs-number">100</span>)
	destSlice := <span class="hljs-built_in">make</span>([]myClass, <span class="hljs-number">0</span>)

	<span class="hljs-keyword">for</span> _, myObj := <span class="hljs-keyword">range</span> sourceSlice {
		<span class="hljs-keyword">var</span> tmpObj myClass
		tmpObj.AttributeName = myObj.AttributeName
		destSlice = <span class="hljs-built_in">append</span>(destSlice, tmpObj)
	}
	fmt.Println(<span class="hljs-built_in">len</span>(destSlice))
}

<span class="hljs-comment">// 100</span>
</code></pre>
<p>sync.WaitGroup を使う。 ( ダメな例 )
append はスレッドセーフではないので件数が減る。</p>
<pre><code class="hljs language-go"><span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> (
	<span class="hljs-string">"fmt"</span>
	<span class="hljs-string">"sync"</span>
)

<span class="hljs-keyword">type</span> myClass <span class="hljs-keyword">struct</span> {
	AttributeName <span class="hljs-type">string</span>
}

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {
	sourceSlice := <span class="hljs-built_in">make</span>([]myClass, <span class="hljs-number">100</span>)
	destSlice := <span class="hljs-built_in">make</span>([]myClass, <span class="hljs-number">0</span>)

	<span class="hljs-keyword">var</span> wg sync.WaitGroup
	<span class="hljs-keyword">for</span> _, myObj := <span class="hljs-keyword">range</span> sourceSlice {
		wg.Add(<span class="hljs-number">1</span>)
		<span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(myObj2 myClass)</span></span> {
			<span class="hljs-keyword">defer</span> wg.Done()
			<span class="hljs-keyword">var</span> tmpObj myClass
			tmpObj.AttributeName = myObj2.AttributeName
			destSlice = <span class="hljs-built_in">append</span>(destSlice, tmpObj)
		}(myObj)
	}
	wg.Wait()
	fmt.Println(<span class="hljs-built_in">len</span>(destSlice))
}

<span class="hljs-comment">// 75</span>
</code></pre>
<p><code>-race</code> を付けることで競合のチェックができる。</p>
<pre><code class="hljs language-bash">$ go run -race main.go

~~ 省略 ~~
==================
97
</code></pre>
<p>sync.Mutex を使う。</p>
<pre><code class="hljs language-go"><span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> (
	<span class="hljs-string">"fmt"</span>
	<span class="hljs-string">"sync"</span>
)

<span class="hljs-keyword">type</span> myClass <span class="hljs-keyword">struct</span> {
	AttributeName <span class="hljs-type">string</span>
}

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {
	sourceSlice := <span class="hljs-built_in">make</span>([]myClass, <span class="hljs-number">100</span>)
	destSlice := <span class="hljs-built_in">make</span>([]myClass, <span class="hljs-number">0</span>)

	<span class="hljs-keyword">var</span> wg sync.WaitGroup
	mu := &#x26;sync.Mutex{}
	<span class="hljs-keyword">for</span> _, myObj := <span class="hljs-keyword">range</span> sourceSlice {
		wg.Add(<span class="hljs-number">1</span>)
		<span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(myObj2 myClass)</span></span> {
			<span class="hljs-keyword">defer</span> wg.Done()
			<span class="hljs-keyword">var</span> tmpObj myClass
			tmpObj.AttributeName = myObj2.AttributeName
			mu.Lock()
			destSlice = <span class="hljs-built_in">append</span>(destSlice, tmpObj)
			mu.Unlock()
		}(myObj)
	}
	wg.Wait()
	fmt.Println(<span class="hljs-built_in">len</span>(destSlice))
}

<span class="hljs-comment">// 100</span>
</code></pre>
<h2>ポーリング</h2>
<p><code>len(q)</code> は溜まったバッファ数を返す。
<code>make</code> で作るときはバッファ数を 2 以上で作らないと <code>len(q)</code> は常に 0 を返す。</p>
<pre><code class="hljs language-go"><span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> (
	<span class="hljs-string">"fmt"</span>
	<span class="hljs-string">"time"</span>
)

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {
	q := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>{}, <span class="hljs-number">2</span>)

	<span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> {
		<span class="hljs-comment">// 重たい処理</span>
		time.Sleep(<span class="hljs-number">3</span> * time.Second)
		q &#x3C;- <span class="hljs-keyword">struct</span>{}{}
	}()

	<span class="hljs-keyword">for</span> {
		<span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(q) > <span class="hljs-number">0</span> {
			fmt.Println(<span class="hljs-string">"完了"</span>)
			<span class="hljs-keyword">break</span>
		}
		time.Sleep(<span class="hljs-number">1</span> * time.Second)
		fmt.Println(<span class="hljs-string">"実行中"</span>)
	}
}

<span class="hljs-comment">// 実行中</span>
<span class="hljs-comment">// 実行中</span>
<span class="hljs-comment">// 実行中</span>
<span class="hljs-comment">// 完了</span>
</code></pre>
<h2>ワーカー</h2>
<p><code>close(q)</code> されたら <code>str, ok := &#x3C;- q</code> の <code>ok</code> が <code>false</code> になる。</p>
<pre><code class="hljs language-go"><span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> (
	<span class="hljs-string">"fmt"</span>
	<span class="hljs-string">"sync"</span>
	<span class="hljs-string">"time"</span>
)

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">printString</span><span class="hljs-params">(wg *sync.WaitGroup, q <span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>)</span></span> {
	<span class="hljs-keyword">defer</span> wg.Done()

	<span class="hljs-keyword">for</span> {
		str, ok := &#x3C;-q
		<span class="hljs-keyword">if</span> !ok {
			<span class="hljs-keyword">return</span>
		}

		fmt.Println(str)
		time.Sleep(<span class="hljs-number">3</span> * time.Second)
	}
}

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {
	<span class="hljs-keyword">const</span> workerNum = <span class="hljs-number">3</span>
	<span class="hljs-keyword">var</span> wg sync.WaitGroup
	q := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>, <span class="hljs-number">5</span>)

	<span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &#x3C; workerNum; i++ {
		wg.Add(<span class="hljs-number">1</span>)
		<span class="hljs-keyword">go</span> printString(&#x26;wg, q)
	}

	q &#x3C;- <span class="hljs-string">"test1"</span>
	q &#x3C;- <span class="hljs-string">"test2"</span>
	q &#x3C;- <span class="hljs-string">"test3"</span>
	q &#x3C;- <span class="hljs-string">"test4"</span>
	q &#x3C;- <span class="hljs-string">"test5"</span>
	<span class="hljs-built_in">close</span>(q)
	wg.Wait()
}

<span class="hljs-comment">// test2</span>
<span class="hljs-comment">// test1</span>
<span class="hljs-comment">// test3</span>
<span class="hljs-comment">// test5</span>
<span class="hljs-comment">// test4</span>
</code></pre>5:["$","article",null,{"style":{"maxWidth":"1000px","margin":"0 auto","padding":"0 2rem 2rem"},"children":[["$","h1",null,{"children":"Golangの並列/並行処理でいろいろ"}],["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$10"}}]]}]
b:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
7:null
9:{"metadata":[["$","title","0",{"children":"MyDocs"}],["$","meta","1",{"name":"description","content":"A simple SSG blog built with Next.js"}]],"error":null,"digest":"$undefined"}
e:"$9:metadata"
