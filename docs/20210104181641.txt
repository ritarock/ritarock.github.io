1:"$Sreact.fragment"
2:I[9119,["119","static/chunks/119-2ee48d1f375d3fd9.js","974","static/chunks/app/page-ee49d1414c09869d.js"],""]
3:I[730,[],""]
4:I[2392,[],""]
6:I[3811,[],"OutletBoundary"]
8:I[4338,[],"AsyncMetadataOutlet"]
a:I[3811,[],"ViewportBoundary"]
c:I[3811,[],"MetadataBoundary"]
d:"$Sreact.suspense"
f:I[9426,[],""]
:HL["/_next/static/css/5e22d3fe14facb50.css","style"]
0:{"P":null,"b":"OVt0H6to9QSgb-YS8ef-u","p":"","c":["","docs","20210104181641"],"i":false,"f":[[["",{"children":["docs",{"children":[["slug","20210104181641","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/5e22d3fe14facb50.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"ja","children":["$","body",null,{"style":{"backgroundColor":"ghostwhite","margin":0,"minHeight":"100vh"},"children":[["$","header",null,{"style":{"padding":"1rem 0","marginBottom":"0.25rem"},"children":["$","div",null,{"style":{"maxWidth":"1000px","margin":"0 auto","padding":"0 2rem"},"children":["$","$L2",null,{"href":"/","style":{"fontSize":"1.5rem","fontWeight":"bold","textDecoration":"none","color":"#333"},"children":"MyDocs"}]}]}],["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]]}]}]]}],{"children":["docs",["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["slug","20210104181641","d"],["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L5",null,["$","$L6",null,{"children":["$L7",["$","$L8",null,{"promise":"$@9"}]]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,[["$","$La",null,{"children":"$Lb"}],null],["$","$Lc",null,{"children":["$","div",null,{"hidden":true,"children":["$","$d",null,{"fallback":null,"children":"$Le"}]}]}]]}],false]],"m":"$undefined","G":["$f",[]],"s":false,"S":true}
10:Td51,<p><a href="https://github.com/ritarock/moniterinstance">インスタンスのCPUをCLIで確認する</a></p>
<p>この CLI を作るにあたってハマったところとその解決法。</p>
<h2>時間でソートする</h2>
<h3>配列のソート</h3>
<p>Golang の場合、お決まりのやり方があるみたいでググると大体同じやり方でやっている。</p>
<p>struct を定義して、<code>Len, Less, Swap</code> メソッドを用意する。</p>
<pre><code class="hljs language-go"><span class="hljs-keyword">type</span> Bytime []*cloudwatch.Datapoint

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(arr Bytime)</span></span> Len() <span class="hljs-type">int</span> {
	<span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(arr)
}

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(arr Bytime)</span></span> Less(i, j <span class="hljs-type">int</span>) <span class="hljs-type">bool</span> {
	<span class="hljs-keyword">return</span> arr[i].Timestamp.Before(*arr[j].Timestamp)
}

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(arr Bytime)</span></span> Swap(i, j <span class="hljs-type">int</span>) {
	arr[i], arr[j] = arr[j], arr[i]
}
</code></pre>
<p>実際にソートするときは、別の配列を用意した。</p>
<pre><code class="hljs language-go"><span class="hljs-keyword">var</span> sortedResp Bytime = resp.Datapoints
sort.Sort(sortedResp)
</code></pre>
<h3>時間の比較</h3>
<p>timeA(2020-01-01 00:00:00 +0000 UTC) と timeB(2021-01-01 00:00:00 +0000 UTC) があるとする。</p>
<pre><code class="hljs language-go">timeA, timeB := time.Date(<span class="hljs-number">2020</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span> , <span class="hljs-number">0</span>, time.UTC), time.Date(<span class="hljs-number">2021</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span> , <span class="hljs-number">0</span>, time.UTC)
</code></pre>
<p>時間の流れは <code>timeA => timeB</code>。</p>
<p>このときの時間の比較は以下のようにできる。</p>
<pre><code class="hljs language-go">timeA.Equal(timeB) <span class="hljs-comment">// false</span>

timeA.Before(timeB) <span class="hljs-comment">// true</span>

timeA.After(timeB) <span class="hljs-comment">// false</span>
</code></pre>
<h2>UTCをJSTに変更</h2>
<pre><code class="hljs language-go">timeA := time.Date(<span class="hljs-number">2020</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span> , <span class="hljs-number">0</span>, time.UTC)
loc, _ := time.LoadLocation(<span class="hljs-string">"Asia/Tokyo"</span>)

fmt.Println(<span class="hljs-string">"UTC "</span> + timeA.String()) <span class="hljs-comment">// UTC 2020-01-01 00:00:00 +0000 UTC</span>
fmt.Println(<span class="hljs-string">"JST "</span> + timeA.In(loc).String()) <span class="hljs-comment">// JST 2020-01-01 09:00:00 +0900 JST</span>
</code></pre>5:["$","article",null,{"style":{"maxWidth":"1000px","margin":"0 auto","padding":"0 2rem 2rem"},"children":[["$","h1",null,{"children":"Golangで時間操作とソート"}],["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$10"}}]]}]
b:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
7:null
9:{"metadata":[["$","title","0",{"children":"MyDocs"}],["$","meta","1",{"name":"description","content":"A simple SSG blog built with Next.js"}]],"error":null,"digest":"$undefined"}
e:"$9:metadata"
