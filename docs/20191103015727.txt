1:"$Sreact.fragment"
2:I[9119,["119","static/chunks/119-2ee48d1f375d3fd9.js","974","static/chunks/app/page-ee49d1414c09869d.js"],""]
3:I[730,[],""]
4:I[2392,[],""]
6:I[3811,[],"OutletBoundary"]
8:I[4338,[],"AsyncMetadataOutlet"]
a:I[3811,[],"ViewportBoundary"]
c:I[3811,[],"MetadataBoundary"]
d:"$Sreact.suspense"
f:I[9426,[],""]
:HL["/_next/static/css/5e22d3fe14facb50.css","style"]
0:{"P":null,"b":"OVt0H6to9QSgb-YS8ef-u","p":"","c":["","docs","20191103015727"],"i":false,"f":[[["",{"children":["docs",{"children":[["slug","20191103015727","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/5e22d3fe14facb50.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"ja","children":["$","body",null,{"style":{"backgroundColor":"ghostwhite","margin":0,"minHeight":"100vh"},"children":[["$","header",null,{"style":{"padding":"1rem 0","marginBottom":"0.25rem"},"children":["$","div",null,{"style":{"maxWidth":"1000px","margin":"0 auto","padding":"0 2rem"},"children":["$","$L2",null,{"href":"/","style":{"fontSize":"1.5rem","fontWeight":"bold","textDecoration":"none","color":"#333"},"children":"MyDocs"}]}]}],["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]]}]}]]}],{"children":["docs",["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["slug","20191103015727","d"],["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L5",null,["$","$L6",null,{"children":["$L7",["$","$L8",null,{"promise":"$@9"}]]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,[["$","$La",null,{"children":"$Lb"}],null],["$","$Lc",null,{"children":["$","div",null,{"hidden":true,"children":["$","$d",null,{"fallback":null,"children":"$Le"}]}]}]]}],false]],"m":"$undefined","G":["$f",[]],"s":false,"S":true}
10:T317a,<h2>データベースの作成</h2>
<pre><code class="hljs language-sql"><span class="hljs-keyword">CREATE</span> DATABASE database_name;
</code></pre>
<h2>データベースの削除</h2>
<pre><code class="hljs language-sql"><span class="hljs-keyword">DROP</span> DATABASE database_name;
</code></pre>
<h2>テーブルの作成</h2>
<pre><code class="hljs language-sql"><span class="hljs-keyword">CREATE TABLE</span> table_name (col_name type, ...);
</code></pre>
<h3>主キー</h3>
<pre><code class="hljs language-sql"><span class="hljs-keyword">CREATE TABLE</span> table_name (col_name type, ..., <span class="hljs-keyword">PRIMARY KEY</span> (col_name));
</code></pre>
<ul>
<li>PRIMARY KEY の重複と NULL は NG</li>
<li>複数の列を指定できる (複合主キー)
<ul>
<li>PRIMARY KEY (列名 1, 列名 2 )</li>
</ul>
</li>
</ul>
<h3>外部キー</h3>
<pre><code class="hljs language-sql"><span class="hljs-keyword">CREATE TABLE</span> table_name (
  col_name type, ...,
  <span class="hljs-keyword">FOREIGN KEY</span> (col_name) <span class="hljs-keyword">REFERENCES</span> parent_table_name(col_name)
);
</code></pre>
<ul>
<li>子テーブルの外部キーの値は親テーブルに存在しないといけない</li>
<li>参照される値 (親テーブル) の UPDATE / DELETE は NG</li>
</ul>
<h4>親テーブルの UPDATE / DELETE 時の設定</h4>
<pre><code class="hljs language-sql"><span class="hljs-keyword">CREATE TABLE</span> table_name (
  col_name type, ...,
  <span class="hljs-keyword">FOREIGN KEY</span> (col_name) <span class="hljs-keyword">REFERENCES</span> parent_table_name(col_name)
  <span class="hljs-keyword">ON</span> <span class="hljs-keyword">DELETE</span> [ アクション ]
  <span class="hljs-keyword">ON</span> <span class="hljs-keyword">UPDATE</span> [ アクション ]
);

</code></pre>
<p>設定できるアクション。</p>
<table>
<thead>
<tr>
<th>アクション</th>
<th>詳細</th>
</tr>
</thead>
<tbody>
<tr>
<td>RESTRICT</td>
<td>親テーブルに対して UPDATE / DELETE を行うとエラーになる ( デフォルト )</td>
</tr>
<tr>
<td>CASCADE</td>
<td>親テーブルに対して UPDATE / DELETE を行うと、子テーブルの一致する行に自動的に UPDATE / DELETE を行う</td>
</tr>
<tr>
<td>SET NULL</td>
<td>親テーブルに対して UPDATE / DELETE を行うと、子テーブルの外部キーを NULL に設定する</td>
</tr>
</tbody>
</table>
<h2>データの検索</h2>
<pre><code class="hljs language-sql"><span class="hljs-keyword">SELECT</span> col_name1, col_name2, ... <span class="hljs-keyword">FROM</span> table_name [ 条件 ];
</code></pre>
<h3>条件</h3>
<ul>
<li>比較演算子</li>
</ul>
<table>
<thead>
<tr>
<th>演算子</th>
<th>意味</th>
</tr>
</thead>
<tbody>
<tr>
<td>"="</td>
<td>等しい</td>
</tr>
<tr>
<td>"&#x3C;"</td>
<td>小さい</td>
</tr>
<tr>
<td>">"</td>
<td>大きい</td>
</tr>
<tr>
<td>"&#x3C;="</td>
<td>以下</td>
</tr>
<tr>
<td>">="</td>
<td>以上</td>
</tr>
<tr>
<td>"&#x3C;>"</td>
<td>等しくない</td>
</tr>
</tbody>
</table>
<ul>
<li>BETWEEN</li>
</ul>
<pre><code class="hljs language-sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> table_name <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">BETWEEN</span> value1 <span class="hljs-keyword">AND</span> value2;
</code></pre>
<p>指定した範囲に値があるものを取得。</p>
<ul>
<li>IN</li>
</ul>
<pre><code class="hljs language-sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> table_name <span class="hljs-keyword">WHERE</span> col_name <span class="hljs-keyword">IN</span> (<span class="hljs-string">'value1'</span>, <span class="hljs-string">'value2'</span>);
</code></pre>
<p>指定した値のリストの中にあるものを取得。</p>
<ul>
<li>LIKE</li>
</ul>
<pre><code class="hljs language-sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> table_name <span class="hljs-keyword">WHERE</span> col_name <span class="hljs-keyword">LIKE</span> <span class="hljs-string">'_100%'</span>;
</code></pre>
<p><code>%</code> は任意の文字数の任意の文字、 <code>_</code> は 1 文字の任意の文字。</p>
<ul>
<li>サブクエリ</li>
</ul>
<pre><code class="hljs language-sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> table_name
<span class="hljs-keyword">WHERE</span> col_name1 <span class="hljs-operator">=</span> (
  <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> table_name <span class="hljs-keyword">WHERE</span> col_name2 <span class="hljs-operator">=</span> <span class="hljs-keyword">value</span>
);
</code></pre>
<p>副問合せ。</p>
<h3>DISTINCT</h3>
<pre><code class="hljs language-sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> col_name1, col_name2, ... <span class="hljs-keyword">FROM</span> table_name;
</code></pre>
<p>SELECT の結果から重複業を除外できる。</p>
<p><code>GROUP BY</code> でも重複削除できる。</p>
<pre><code class="hljs language-sql"><span class="hljs-keyword">SELECT</span> col_name1, col_name2, ... <span class="hljs-keyword">FROM</span> table_name <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> col_name1;
</code></pre>
<h3>ORDER BY</h3>
<pre><code class="hljs language-sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> table_name <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> col_name1 <span class="hljs-keyword">ASC</span>, col_name2 <span class="hljs-keyword">DESC</span>;
</code></pre>
<p>ASC は昇順。 DESC は降順。 ASC は省略可能。</p>
<h3>LIMIT</h3>
<pre><code class="hljs language-sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> table_name <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> col_name LIMIT <span class="hljs-number">5</span>;
</code></pre>
<h3>集約関数</h3>
<pre><code class="hljs language-sql"><span class="hljs-keyword">SELECT</span> col_name, <span class="hljs-built_in">MAX</span>(col_name) <span class="hljs-keyword">FROM</span> table_name;
</code></pre>
<p>基本的に NULL は無視される。
集約関数の種類。</p>
<table>
<thead>
<tr>
<th>関数</th>
<th>意味</th>
</tr>
</thead>
<tbody>
<tr>
<td>MAX</td>
<td>最大値</td>
</tr>
<tr>
<td>MIN</td>
<td>最小値</td>
</tr>
<tr>
<td>SUM</td>
<td>合計</td>
</tr>
<tr>
<td>AVG</td>
<td>平均</td>
</tr>
<tr>
<td>COUNT</td>
<td>カウント</td>
</tr>
</tbody>
</table>
<p>SUM / AVG / COUNT は DISTINCT をサポートしている。</p>
<pre><code class="hljs language-sql"><span class="hljs-keyword">SELECT</span> col_name, <span class="hljs-built_in">COUNT</span>( <span class="hljs-keyword">DISTINCT</span> col_name ) <span class="hljs-keyword">FROM</span> table_name;
</code></pre>
<h3>GROUP BY</h3>
<pre><code class="hljs language-sql"><span class="hljs-keyword">SELECT</span> col_name, <span class="hljs-built_in">COUNT</span>(col_name) <span class="hljs-keyword">FROM</span> table_name <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> col_name;
</code></pre>
<p>テーブルを集約キーでグループ分けしてから集計する。</p>
<h3>HAVING</h3>
<pre><code class="hljs language-sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(col_name1) <span class="hljs-keyword">FROM</span> table_name <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> col_name1 <span class="hljs-keyword">HAVING</span> <span class="hljs-built_in">COUNT</span>(col_name1) <span class="hljs-operator">>=</span> <span class="hljs-keyword">value</span>;
</code></pre>
<p><code>GROUP BY</code> されたグループに対して条件を指定できる。</p>
<p>この場合、列名 1 で集計した値をカウントしてから HAVING で指定した条件のもののみを取得する。</p>
<h2>結合 ( JOIN )</h2>
<p>結合の種類は 3 つ。</p>
<ul>
<li>クロス結合 ( CROSS JOIN )</li>
<li>内部結合 ( INNER JOIN )</li>
<li>外部結合 ( OUTER JOIN )</li>
</ul>
<h3>クロス結合 ( CROSS JOIN )</h3>
<pre><code class="hljs language-sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span>
<span class="hljs-keyword">FROM</span> table_name1 <span class="hljs-keyword">CROSS</span> <span class="hljs-keyword">JOIN</span> table_name2;
</code></pre>
<p>すべてのテーブルの組み合わせを作る。</p>
<h3>内部結合 ( INNER JOIN )</h3>
<pre><code class="hljs language-sql"><span class="hljs-keyword">SELECT</span> table_name1.<span class="hljs-operator">*</span>, table_name2.col_name, ...
<span class="hljs-keyword">FROM</span> table_name1 <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> table_name2
<span class="hljs-keyword">ON</span> table_name1.col_name1 <span class="hljs-operator">=</span> table_name2.col_name1;
</code></pre>
<p>クロス結合の部分集合。条件一致したものだけを取得する。</p>
<p><code>USING</code> でも書ける。</p>
<pre><code class="hljs language-sql"><span class="hljs-keyword">SELECT</span> table_name1.<span class="hljs-operator">*</span>, table_name2.col_name, ...
<span class="hljs-keyword">FROM</span> table_name1 <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> table_name2 <span class="hljs-keyword">USING</span>(col_name);
</code></pre>
<h3>外部結合</h3>
<pre><code class="hljs language-sql"><span class="hljs-keyword">SELECT</span> table_name1.<span class="hljs-operator">*</span>, table_name2.col_name, ...
<span class="hljs-keyword">FROM</span> table_name1 ( <span class="hljs-keyword">LEFT</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">RIGHT</span> ) <span class="hljs-keyword">OUTER</span> <span class="hljs-keyword">JOIN</span> table_name2
<span class="hljs-keyword">ON</span> table_name1.col_name1 <span class="hljs-operator">=</span> table_name2.col_name1;
</code></pre>
<p>内部結合と同様に条件一致したものを取得し、さらに、マッチしなかった ( LEFT | RIGHT ) のテーブルの行は残す。</p>
<table>
<thead>
<tr>
<th>書式</th>
<th>内容</th>
</tr>
</thead>
<tbody>
<tr>
<td>LEFT OUTER JOIN</td>
<td>FROM のあとに書かれたテーブルのデータだけを取得</td>
</tr>
<tr>
<td>RIGHT OUTER JOIN</td>
<td>JOIN の後に書かれたテーブルのデータだけを取得</td>
</tr>
</tbody>
</table>
<h2>テーブルの削除</h2>
<pre><code class="hljs language-sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> table_name;
</code></pre>
<h2>データの挿入</h2>
<pre><code class="hljs language-sql"><span class="hljs-keyword">INSERT INTO</span> database_name.table_name(col_name1, col_name2, ...) <span class="hljs-keyword">VALUES</span> (value1, value2, ...);
</code></pre>
<p>全てのカラムに値を追加する場合は以下のように書ける。</p>
<pre><code class="hljs language-sql"><span class="hljs-keyword">INSERT INTO</span> table_name <span class="hljs-keyword">VALUES</span>(value1, value2, ...);
</code></pre>
<h2>ビュー</h2>
<p>データを持たず実行分だけが入っている。</p>
<pre><code class="hljs language-sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> view_name (col_name1, col_name2, ...) <span class="hljs-keyword">AS</span> select_statement;
</code></pre>
<h2>数値として取り出す</h2>
<pre><code class="hljs language-sql"><span class="hljs-keyword">SELECT</span> col_name <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">as</span> unsigned <span class="hljs-keyword">FROM</span> table_name;
</code></pre>
<h2>index の付け方</h2>
<pre><code class="hljs language-sql"><span class="hljs-keyword">ALTER TABLE</span> table_name <span class="hljs-keyword">AND</span> INDEX index_name (col_name);
</code></pre>
<h2>トランザクション</h2>
<p><code>BEGIN</code> で開始して, <code>COMMIT</code> で反映, <code>ROLLBACK</code> で取り消しができる。</p>
<pre><code class="hljs language-sql"><span class="hljs-keyword">BEGIN</span>;
  SQL1;
  SQL2;
<span class="hljs-keyword">COMMIT</span>;
</code></pre>5:["$","article",null,{"style":{"maxWidth":"1000px","margin":"0 auto","padding":"0 2rem 2rem"},"children":[["$","h1",null,{"children":"データベース操作"}],["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$10"}}]]}]
b:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
7:null
9:{"metadata":[["$","title","0",{"children":"MyDocs"}],["$","meta","1",{"name":"description","content":"A simple SSG blog built with Next.js"}]],"error":null,"digest":"$undefined"}
e:"$9:metadata"
