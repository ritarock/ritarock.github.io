1:"$Sreact.fragment"
2:I[9119,["119","static/chunks/119-2ee48d1f375d3fd9.js","974","static/chunks/app/page-ee49d1414c09869d.js"],""]
3:I[730,[],""]
4:I[2392,[],""]
6:I[3811,[],"OutletBoundary"]
8:I[4338,[],"AsyncMetadataOutlet"]
a:I[3811,[],"ViewportBoundary"]
c:I[3811,[],"MetadataBoundary"]
d:"$Sreact.suspense"
f:I[9426,[],""]
:HL["/_next/static/css/5e22d3fe14facb50.css","style"]
0:{"P":null,"b":"OVt0H6to9QSgb-YS8ef-u","p":"","c":["","docs","20211104175819"],"i":false,"f":[[["",{"children":["docs",{"children":[["slug","20211104175819","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/5e22d3fe14facb50.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"ja","children":["$","body",null,{"style":{"backgroundColor":"ghostwhite","margin":0,"minHeight":"100vh"},"children":[["$","header",null,{"style":{"padding":"1rem 0","marginBottom":"0.25rem"},"children":["$","div",null,{"style":{"maxWidth":"1000px","margin":"0 auto","padding":"0 2rem"},"children":["$","$L2",null,{"href":"/","style":{"fontSize":"1.5rem","fontWeight":"bold","textDecoration":"none","color":"#333"},"children":"MyDocs"}]}]}],["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]]}]}]]}],{"children":["docs",["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["slug","20211104175819","d"],["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L5",null,["$","$L6",null,{"children":["$L7",["$","$L8",null,{"promise":"$@9"}]]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,[["$","$La",null,{"children":"$Lb"}],null],["$","$Lc",null,{"children":["$","div",null,{"hidden":true,"children":["$","$d",null,{"fallback":null,"children":"$Le"}]}]}]]}],false]],"m":"$undefined","G":["$f",[]],"s":false,"S":true}
10:T1091,<p><code>goroutine</code> が効果を発揮するのは、<code>I/O</code> が絡むケース。メモリや CPU のみを使う計算処理を並行処理してもそれほど効果を発揮しない。</p>
<h2>競合状態</h2>
<p>データ処理に順番ありの可能性がある。処理の間に 1 時間掛かっても問題ないか?と考える。</p>
<h2>アトミック性</h2>
<p>処理が行われたか、行われたかったかの 2 パターンしかない。処理を分解したときにこれ以上分解できない単位。
<code>i++</code> は非アトミック。</p>
<ul>
<li>i の値を取得する</li>
<li>i の値を 1 増やす</li>
<li>i の値を保存する</li>
</ul>
<p>アトミックな処理であれば複数のゴルーチンで安全に扱える。</p>
<h2>メモリアクセス同期</h2>
<p>排他処理が必要。 <code>sync.Mutex</code> で解決できる。</p>
<h2>デッドロック</h2>
<ul>
<li>相互排他
<ul>
<li>ある並行プロセスがリソースに対して排他的な権利をどの時点でも保持している</li>
</ul>
</li>
<li>条件待ち
<ul>
<li>ある並行プロセスがリソースの保持と追加のリソース待ちを同時に行う</li>
</ul>
</li>
<li>横取り不可
<ul>
<li>ある並行プロセスによって保持されているリソースはそのプロセスによってのみ開放される</li>
</ul>
</li>
<li>循環待ち
<ul>
<li>ある並行プロセス ( P1 ) は他の並行プロセス ( P2 ) を待たなければならない。そして P2 は P1 を待っている</li>
</ul>
</li>
</ul>
<h2>ライブロック</h2>
<p>ライブロックが起こる原因の多くは、試行回数に上限がない。 2 つの並行プロセスが互いのデッドロックを予防して起こる。</p>
<h2>リソース枯渇</h2>
<p>ライブロックのように 1 つ以上の貪欲なプロセスが他のリソースを奪うことで起こる。</p>
<pre><code class="hljs language-go"><span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> (
	<span class="hljs-string">"fmt"</span>
	<span class="hljs-string">"sync"</span>
	<span class="hljs-string">"time"</span>
)

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {
	<span class="hljs-keyword">var</span> wg sync.WaitGroup
	<span class="hljs-keyword">var</span> sharedLock sync.Mutex
	<span class="hljs-keyword">const</span> RUNTIME = <span class="hljs-number">1</span> * time.Second

	greedWorker := <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> {
		<span class="hljs-keyword">defer</span> wg.Done()

		<span class="hljs-keyword">var</span> count <span class="hljs-type">int</span>
		<span class="hljs-keyword">for</span> begin := time.Now(); time.Since(begin) &#x3C;= RUNTIME; {
			sharedLock.Lock()
			time.Sleep(<span class="hljs-number">3</span> * time.Nanosecond)
			sharedLock.Unlock()
			count++
		}
		fmt.Printf(<span class="hljs-string">"greed worker loops: %v\n"</span>, count)
	}

	politeWorker := <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> {
		<span class="hljs-keyword">defer</span> wg.Done()

		<span class="hljs-keyword">var</span> count <span class="hljs-type">int</span>
		<span class="hljs-keyword">for</span> begin := time.Now(); time.Since(begin) &#x3C;= RUNTIME; {
			sharedLock.Lock()
			time.Sleep(<span class="hljs-number">1</span> * time.Nanosecond)
			sharedLock.Unlock()
			sharedLock.Lock()
			time.Sleep(<span class="hljs-number">1</span> * time.Nanosecond)
			sharedLock.Unlock()
			sharedLock.Lock()
			time.Sleep(<span class="hljs-number">1</span> * time.Nanosecond)
			sharedLock.Unlock()
			count++
		}
		fmt.Printf(<span class="hljs-string">"polite worker loops: %v\n"</span>, count)
	}

	wg.Add(<span class="hljs-number">2</span>)
	<span class="hljs-keyword">go</span> greedWorker()
	<span class="hljs-keyword">go</span> politeWorker()
	wg.Wait()
}
</code></pre>
<pre><code class="hljs language-bash">$ go run main.go 
greed worker loops: 867215
polite worker loops: 524996
</code></pre>5:["$","article",null,{"style":{"maxWidth":"1000px","margin":"0 auto","padding":"0 2rem 2rem"},"children":[["$","h1",null,{"children":"並行処理の考え方"}],["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$10"}}]]}]
b:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
7:null
9:{"metadata":[["$","title","0",{"children":"MyDocs"}],["$","meta","1",{"name":"description","content":"A simple SSG blog built with Next.js"}]],"error":null,"digest":"$undefined"}
e:"$9:metadata"
