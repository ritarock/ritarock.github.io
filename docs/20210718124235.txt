1:"$Sreact.fragment"
2:I[9119,["119","static/chunks/119-2ee48d1f375d3fd9.js","974","static/chunks/app/page-ee49d1414c09869d.js"],""]
3:I[730,[],""]
4:I[2392,[],""]
6:I[3811,[],"OutletBoundary"]
8:I[4338,[],"AsyncMetadataOutlet"]
a:I[3811,[],"ViewportBoundary"]
c:I[3811,[],"MetadataBoundary"]
d:"$Sreact.suspense"
f:I[9426,[],""]
:HL["/_next/static/css/5e22d3fe14facb50.css","style"]
0:{"P":null,"b":"nvFx_FV4eLnf8EmFzYlmi","p":"","c":["","docs","20210718124235"],"i":false,"f":[[["",{"children":["docs",{"children":[["slug","20210718124235","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/5e22d3fe14facb50.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"ja","children":["$","body",null,{"style":{"backgroundColor":"ghostwhite","margin":0,"minHeight":"100vh"},"children":[["$","header",null,{"style":{"padding":"1rem 0","marginBottom":"0.25rem"},"children":["$","div",null,{"style":{"maxWidth":"1000px","margin":"0 auto","padding":"0 2rem"},"children":["$","$L2",null,{"href":"/","style":{"fontSize":"1.5rem","fontWeight":"bold","textDecoration":"none","color":"#333"},"children":"MyDocs"}]}]}],["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]]}]}]]}],{"children":["docs",["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["slug","20210718124235","d"],["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L5",null,["$","$L6",null,{"children":["$L7",["$","$L8",null,{"promise":"$@9"}]]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,[["$","$La",null,{"children":"$Lb"}],null],["$","$Lc",null,{"children":["$","div",null,{"hidden":true,"children":["$","$d",null,{"fallback":null,"children":"$Le"}]}]}]]}],false]],"m":"$undefined","G":["$f",[]],"s":false,"S":true}
10:T3171,<h2>JSON の解析</h2>
<p>今回使う JSON ファイル。</p>
<pre><code class="hljs language-json"><span class="hljs-punctuation">{</span>
  <span class="hljs-attr">"id"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">"content"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"Hello"</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">"author"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
    <span class="hljs-attr">"id"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"name"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"author1"</span>
  <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">"comments"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>
    <span class="hljs-punctuation">{</span>
      <span class="hljs-attr">"id"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span>
      <span class="hljs-attr">"content"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"comment1"</span><span class="hljs-punctuation">,</span>
      <span class="hljs-attr">"author"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"author2"</span>
    <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
    <span class="hljs-punctuation">{</span>
      <span class="hljs-attr">"id"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span>
      <span class="hljs-attr">"content"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"comment2"</span><span class="hljs-punctuation">,</span>
      <span class="hljs-attr">"author"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"author3"</span>
    <span class="hljs-punctuation">}</span>
  <span class="hljs-punctuation">]</span>
<span class="hljs-punctuation">}</span>

</code></pre>
<h3>Unmarshal を使う</h3>
<p>文字列データの場合は Unmarshal を使う。</p>
<ul>
<li>構造体を定義</li>
<li>JSON を構造体に格納</li>
</ul>
<pre><code class="hljs language-go"><span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> (
	<span class="hljs-string">"encoding/json"</span>
	<span class="hljs-string">"fmt"</span>
	<span class="hljs-string">"io/ioutil"</span>
	<span class="hljs-string">"os"</span>
)

<span class="hljs-keyword">type</span> Post <span class="hljs-keyword">struct</span> {
	Id      <span class="hljs-type">int</span>    <span class="hljs-string">`json:"id"`</span>
	Content <span class="hljs-type">string</span> <span class="hljs-string">`json:"content"`</span>
	Author  <span class="hljs-keyword">struct</span> {
		Id   <span class="hljs-type">int</span>    <span class="hljs-string">`json:"id"`</span>
		Name <span class="hljs-type">string</span> <span class="hljs-string">`json:"name"`</span>
	} <span class="hljs-string">`json:"author"`</span>
	Comments []<span class="hljs-keyword">struct</span> {
		Id      <span class="hljs-type">int</span>    <span class="hljs-string">`json:"id"`</span>
		Content <span class="hljs-type">string</span> <span class="hljs-string">`json:"content"`</span>
		Author  <span class="hljs-type">string</span> <span class="hljs-string">`json:"author"`</span>
	} <span class="hljs-string">`json:"comments"`</span>
}

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {
	jsonFile, err := os.Open(<span class="hljs-string">"file.json"</span>)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		fmt.Println(err)
		<span class="hljs-keyword">return</span>
	}
	<span class="hljs-keyword">defer</span> jsonFile.Close()

	jsonData, err := ioutil.ReadAll(jsonFile)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		fmt.Println(err)
		<span class="hljs-keyword">return</span>
	}

	<span class="hljs-keyword">var</span> post Post
	json.Unmarshal(jsonData, &#x26;post)
	fmt.Println(post) <span class="hljs-comment">// {1 Hello {0 author1} [{1 comment1 author2} {2 comment2 author3}]}</span>
}
</code></pre>
<h3>デコーダを使う</h3>
<p>http.Request の Body のように <code>io.Reader</code> のストリームからデータが入ってくる場合に使う。</p>
<ul>
<li>構造体を定義</li>
<li>デコーダを作成する</li>
<li>JSON を順次処理してデコードする</li>
</ul>
<pre><code class="hljs language-go"><span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> (
	<span class="hljs-string">"encoding/json"</span>
	<span class="hljs-string">"fmt"</span>
	<span class="hljs-string">"io"</span>
	<span class="hljs-string">"os"</span>
)

<span class="hljs-keyword">type</span> Post <span class="hljs-keyword">struct</span> {
	Id      <span class="hljs-type">int</span>    <span class="hljs-string">`json:"id"`</span>
	Content <span class="hljs-type">string</span> <span class="hljs-string">`json:"content"`</span>
	Author  <span class="hljs-keyword">struct</span> {
		Id   <span class="hljs-type">int</span>    <span class="hljs-string">`json:"id"`</span>
		Name <span class="hljs-type">string</span> <span class="hljs-string">`json:"name"`</span>
	} <span class="hljs-string">`json:"author"`</span>
	Comments []<span class="hljs-keyword">struct</span> {
		Id      <span class="hljs-type">int</span>    <span class="hljs-string">`json:"id"`</span>
		Content <span class="hljs-type">string</span> <span class="hljs-string">`json:"content"`</span>
		Author  <span class="hljs-type">string</span> <span class="hljs-string">`json:"author"`</span>
	} <span class="hljs-string">`json:"comments"`</span>
}

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {
	jsonFile, err := os.Open(<span class="hljs-string">"file.json"</span>)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		fmt.Println(err)
		<span class="hljs-keyword">return</span>
	}
	<span class="hljs-keyword">defer</span> jsonFile.Close()

	decoder := json.NewDecoder(jsonFile)
	<span class="hljs-keyword">for</span> {
		<span class="hljs-keyword">var</span> post Post
		err := decoder.Decode(&#x26;post)
		<span class="hljs-keyword">if</span> err == io.EOF {
			<span class="hljs-keyword">break</span>
		}
		<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
			fmt.Println(err)
			<span class="hljs-keyword">return</span>
		}
		fmt.Println(post) <span class="hljs-comment">// {1 Hello {1 author1} [{1 comment1 author2} {2 comment2 author3}]}</span>
	}
}
</code></pre>
<h2>JSON データを作成する</h2>
<ul>
<li>構造体を定義</li>
<li>構造体を JSON データに組み換え</li>
</ul>
<pre><code class="hljs language-go"><span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> (
	<span class="hljs-string">"encoding/json"</span>
	<span class="hljs-string">"fmt"</span>
	<span class="hljs-string">"io/ioutil"</span>
)

<span class="hljs-keyword">type</span> Post <span class="hljs-keyword">struct</span> {
	Id       <span class="hljs-type">int</span>       <span class="hljs-string">`json:"id"`</span>
	Content  <span class="hljs-type">string</span>    <span class="hljs-string">`json:"content"`</span>
	Author   Author    <span class="hljs-string">`json:"author"`</span>
	Comments []Comment <span class="hljs-string">`json:"comments"`</span>
}
<span class="hljs-keyword">type</span> Author <span class="hljs-keyword">struct</span> {
	Id   <span class="hljs-type">int</span>    <span class="hljs-string">`json:"id"`</span>
	Name <span class="hljs-type">string</span> <span class="hljs-string">`json:"name"`</span>
}
<span class="hljs-keyword">type</span> Comment <span class="hljs-keyword">struct</span> {
	Id      <span class="hljs-type">int</span>    <span class="hljs-string">`json:"id"`</span>
	Content <span class="hljs-type">string</span> <span class="hljs-string">`json:"content"`</span>
	Author  <span class="hljs-type">string</span> <span class="hljs-string">`json:"author"`</span>
}

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {
	post := Post{
		Id:      <span class="hljs-number">1</span>,
		Content: <span class="hljs-string">"Hello"</span>,
		Author: Author{
			Id:   <span class="hljs-number">1</span>,
			Name: <span class="hljs-string">"author1"</span>,
		},
		Comments: []Comment{
			{
				Id:      <span class="hljs-number">1</span>,
				Content: <span class="hljs-string">"comment1"</span>,
				Author:  <span class="hljs-string">"author2"</span>,
			},
			{
				Id:      <span class="hljs-number">2</span>,
				Content: <span class="hljs-string">"comment2"</span>,
				Author:  <span class="hljs-string">"author3"</span>,
			},
		},
	}
	output, err := json.MarshalIndent(&#x26;post, <span class="hljs-string">""</span>, <span class="hljs-string">"\t\t"</span>)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		fmt.Println(err)
		<span class="hljs-keyword">return</span>
	}
	err = ioutil.WriteFile(<span class="hljs-string">"created.json"</span>, output, <span class="hljs-number">0644</span>)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		fmt.Println(err)
		<span class="hljs-keyword">return</span>
	}
}
</code></pre>
<h3>エンコーダを使う</h3>
<ul>
<li>構造体を定義</li>
<li>エンコーダを作成する</li>
<li>エンコーダを使い構造体を JSON ファイルにエンコード</li>
</ul>
<pre><code class="hljs language-go"><span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> (
	<span class="hljs-string">"encoding/json"</span>
	<span class="hljs-string">"fmt"</span>
	<span class="hljs-string">"os"</span>
)

<span class="hljs-keyword">type</span> Post <span class="hljs-keyword">struct</span> {
	Id       <span class="hljs-type">int</span>       <span class="hljs-string">`json:"id"`</span>
	Content  <span class="hljs-type">string</span>    <span class="hljs-string">`json:"content"`</span>
	Author   Author    <span class="hljs-string">`json:"author"`</span>
	Comments []Comment <span class="hljs-string">`json:"comments"`</span>
}
<span class="hljs-keyword">type</span> Author <span class="hljs-keyword">struct</span> {
	Id   <span class="hljs-type">int</span>    <span class="hljs-string">`json:"id"`</span>
	Name <span class="hljs-type">string</span> <span class="hljs-string">`json:"name"`</span>
}
<span class="hljs-keyword">type</span> Comment <span class="hljs-keyword">struct</span> {
	Id      <span class="hljs-type">int</span>    <span class="hljs-string">`json:"id"`</span>
	Content <span class="hljs-type">string</span> <span class="hljs-string">`json:"content"`</span>
	Author  <span class="hljs-type">string</span> <span class="hljs-string">`json:"author"`</span>
}

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {
	post := Post{
		Id:      <span class="hljs-number">1</span>,
		Content: <span class="hljs-string">"Hello"</span>,
		Author: Author{
			Id:   <span class="hljs-number">1</span>,
			Name: <span class="hljs-string">"author1"</span>,
		},
		Comments: []Comment{
			{
				Id:      <span class="hljs-number">1</span>,
				Content: <span class="hljs-string">"comment1"</span>,
				Author:  <span class="hljs-string">"author2"</span>,
			},
			{
				Id:      <span class="hljs-number">2</span>,
				Content: <span class="hljs-string">"comment2"</span>,
				Author:  <span class="hljs-string">"author3"</span>,
			},
		},
	}
	jsonFile, err := os.Create(<span class="hljs-string">"created.json"</span>)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		fmt.Println(err)
		<span class="hljs-keyword">return</span>
	}
	encoder := json.NewEncoder(jsonFile)
	err = encoder.Encode(&#x26;post)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		fmt.Println(err)
		<span class="hljs-keyword">return</span>
	}
}
</code></pre>5:["$","article",null,{"style":{"maxWidth":"1000px","margin":"0 auto","padding":"0 2rem 2rem"},"children":[["$","h1",null,{"children":"Golangでjsonを操作する"}],["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$10"}}]]}]
b:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
7:null
9:{"metadata":[["$","title","0",{"children":"MyDocs"}],["$","meta","1",{"name":"description","content":"A simple SSG blog built with Next.js"}]],"error":null,"digest":"$undefined"}
e:"$9:metadata"
