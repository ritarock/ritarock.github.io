1:"$Sreact.fragment"
2:I[9119,["119","static/chunks/119-2ee48d1f375d3fd9.js","974","static/chunks/app/page-ee49d1414c09869d.js"],""]
3:I[730,[],""]
4:I[2392,[],""]
6:I[3811,[],"OutletBoundary"]
8:I[4338,[],"AsyncMetadataOutlet"]
a:I[3811,[],"ViewportBoundary"]
c:I[3811,[],"MetadataBoundary"]
d:"$Sreact.suspense"
f:I[9426,[],""]
:HL["/_next/static/css/5e22d3fe14facb50.css","style"]
0:{"P":null,"b":"nvFx_FV4eLnf8EmFzYlmi","p":"","c":["","docs","20240818155506"],"i":false,"f":[[["",{"children":["docs",{"children":[["slug","20240818155506","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/5e22d3fe14facb50.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"ja","children":["$","body",null,{"style":{"backgroundColor":"ghostwhite","margin":0,"minHeight":"100vh"},"children":[["$","header",null,{"style":{"padding":"1rem 0","marginBottom":"0.25rem"},"children":["$","div",null,{"style":{"maxWidth":"1000px","margin":"0 auto","padding":"0 2rem"},"children":["$","$L2",null,{"href":"/","style":{"fontSize":"1.5rem","fontWeight":"bold","textDecoration":"none","color":"#333"},"children":"MyDocs"}]}]}],["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]]}]}]]}],{"children":["docs",["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["slug","20240818155506","d"],["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L5",null,["$","$L6",null,{"children":["$L7",["$","$L8",null,{"promise":"$@9"}]]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,[["$","$La",null,{"children":"$Lb"}],null],["$","$Lc",null,{"children":["$","div",null,{"hidden":true,"children":["$","$d",null,{"fallback":null,"children":"$Le"}]}]}]]}],false]],"m":"$undefined","G":["$f",[]],"s":false,"S":true}
10:T3d7a,<h2>イテレータ</h2>
<p>下記の 3 種類が存在する。</p>
<pre><code class="hljs language-go"><span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(<span class="hljs-keyword">func</span>()</span></span> <span class="hljs-type">bool</span>)
<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(<span class="hljs-keyword">func</span>(K)</span></span> <span class="hljs-type">bool</span>)
<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(<span class="hljs-keyword">func</span>(K, V)</span></span> <span class="hljs-type">bool</span>)
</code></pre>
<h2>slices</h2>
<h3>All</h3>
<p>インデックスと値に対するイテレータを返す。</p>
<pre><code class="hljs language-go"><span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> (
	<span class="hljs-string">"fmt"</span>
	<span class="hljs-string">"slices"</span>
)

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {
	s := []<span class="hljs-type">string</span>{<span class="hljs-string">"a"</span>, <span class="hljs-string">"b"</span>, <span class="hljs-string">"c"</span>, <span class="hljs-string">"d"</span>, <span class="hljs-string">"e"</span>}
	itr := slices.All(s)

	<span class="hljs-keyword">for</span> i, v := <span class="hljs-keyword">range</span> itr {
		fmt.Println(i, v)
	}
}

<span class="hljs-comment">// 0 a</span>
<span class="hljs-comment">// 1 b</span>
<span class="hljs-comment">// 2 c</span>
<span class="hljs-comment">// 3 d</span>
<span class="hljs-comment">// 4 e</span>
</code></pre>
<h3>Values</h3>
<p>スライス要素のイテレータを返す。</p>
<pre><code class="hljs language-go"><span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> (
	<span class="hljs-string">"fmt"</span>
	<span class="hljs-string">"slices"</span>
)

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {
	s := []<span class="hljs-type">string</span>{<span class="hljs-string">"a"</span>, <span class="hljs-string">"b"</span>, <span class="hljs-string">"c"</span>, <span class="hljs-string">"d"</span>, <span class="hljs-string">"e"</span>}
	itr := slices.Values(s)

	<span class="hljs-keyword">for</span> v := <span class="hljs-keyword">range</span> itr {
		fmt.Println(v)
	}
}

<span class="hljs-comment">// a</span>
<span class="hljs-comment">// b</span>
<span class="hljs-comment">// c</span>
<span class="hljs-comment">// d</span>
<span class="hljs-comment">// e</span>
</code></pre>
<h3>Backward</h3>
<p>スライスを逆方向にループするイテレータを返す。</p>
<pre><code class="hljs language-go"><span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> (
	<span class="hljs-string">"fmt"</span>
	<span class="hljs-string">"slices"</span>
)

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {
	s := []<span class="hljs-type">string</span>{<span class="hljs-string">"a"</span>, <span class="hljs-string">"b"</span>, <span class="hljs-string">"c"</span>, <span class="hljs-string">"d"</span>, <span class="hljs-string">"e"</span>}
	itr := slices.Backward(s)

	<span class="hljs-keyword">for</span> i, v := <span class="hljs-keyword">range</span> itr {
		fmt.Println(i, v)
	}
}

<span class="hljs-comment">// 4 e</span>
<span class="hljs-comment">// 3 d</span>
<span class="hljs-comment">// 2 c</span>
<span class="hljs-comment">// 1 b</span>
<span class="hljs-comment">// 0 a</span>
</code></pre>
<h3>Collect</h3>
<p>イテレータから新しいスライスに値を収集する。</p>
<p>下記は、<code>iter.Seq[V]</code> のイテレータを <code>[]V</code> の slice に集約している。</p>
<pre><code class="hljs language-go"><span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> (
	<span class="hljs-string">"fmt"</span>
	<span class="hljs-string">"slices"</span>
)

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {
	s := []<span class="hljs-type">string</span>{<span class="hljs-string">"a"</span>, <span class="hljs-string">"b"</span>, <span class="hljs-string">"c"</span>, <span class="hljs-string">"d"</span>, <span class="hljs-string">"e"</span>}
	itr := slices.Values(s)
	s2 := slices.Collect(itr)
	fmt.Println(s2)
}

<span class="hljs-comment">// [a b c d e]</span>
</code></pre>
<h3>AppendSeq</h3>
<p>イテレータの値を既存のスライスに追加する。</p>
<pre><code class="hljs language-go"><span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> (
	<span class="hljs-string">"fmt"</span>
	<span class="hljs-string">"slices"</span>
)

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {
	s := []<span class="hljs-type">string</span>{<span class="hljs-string">"a"</span>, <span class="hljs-string">"b"</span>, <span class="hljs-string">"c"</span>, <span class="hljs-string">"d"</span>, <span class="hljs-string">"e"</span>}
	s2 := []<span class="hljs-type">string</span>{<span class="hljs-string">"f"</span>, <span class="hljs-string">"g"</span>, <span class="hljs-string">"h"</span>}

	itr := slices.Values(s)
	s3 := slices.AppendSeq(s2, itr)

	fmt.Println(s3) <span class="hljs-comment">// この s3 の型は []string</span>
}

<span class="hljs-comment">// [f g h a b c d e]</span>
</code></pre>
<h3>Sorted</h3>
<p>イテレータから新しいスライスに値を集め、ソートする。</p>
<pre><code class="hljs language-go"><span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> (
	<span class="hljs-string">"fmt"</span>
	<span class="hljs-string">"slices"</span>
)

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {
	s := []<span class="hljs-type">string</span>{<span class="hljs-string">"z"</span>, <span class="hljs-string">"a"</span>, <span class="hljs-string">"b"</span>, <span class="hljs-string">"c"</span>, <span class="hljs-string">"d"</span>, <span class="hljs-string">"e"</span>}

	itr := slices.Values(s)

	s2 := slices.Sorted(itr)

	fmt.Println(s2)
}

<span class="hljs-comment">// [a b c d e z]</span>
</code></pre>
<h3>SortedFunc</h3>
<p>ソート方法を指定できる。</p>
<pre><code class="hljs language-go"><span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> (
	<span class="hljs-string">"fmt"</span>
	<span class="hljs-string">"slices"</span>
	<span class="hljs-string">"strings"</span>
)

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {
	s := []<span class="hljs-type">string</span>{<span class="hljs-string">"z"</span>, <span class="hljs-string">"a"</span>, <span class="hljs-string">"b"</span>, <span class="hljs-string">"c"</span>, <span class="hljs-string">"d"</span>, <span class="hljs-string">"e"</span>}

	itr := slices.Values(s)

	s2 := slices.SortedFunc(itr, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(a, b <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">int</span> {
		<span class="hljs-keyword">return</span> strings.Compare(b, a)
	})

	fmt.Println(s2)
}

<span class="hljs-comment">// [z e d c b a]</span>
</code></pre>
<h3>SortedStableFunc</h3>
<p>安定したソートアルゴリズムを使う。</p>
<pre><code class="hljs language-go"><span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> (
	<span class="hljs-string">"fmt"</span>
	<span class="hljs-string">"slices"</span>
	<span class="hljs-string">"strings"</span>
)

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {
	s := []<span class="hljs-type">string</span>{<span class="hljs-string">"z"</span>, <span class="hljs-string">"a"</span>, <span class="hljs-string">"b"</span>, <span class="hljs-string">"c"</span>, <span class="hljs-string">"d"</span>, <span class="hljs-string">"e"</span>}

	itr := slices.Values(s)

	s2 := slices.SortedStableFunc(itr, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(a, b <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">int</span> {
		<span class="hljs-keyword">return</span> strings.Compare(b, a)
	})

	fmt.Println(s2)
}

<span class="hljs-comment">// [z e d c b a]</span>
</code></pre>
<h3>Chunk</h3>
<p>スライスを指定された要素数のサブスライスのイテレータとして返す。</p>
<pre><code class="hljs language-go"><span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> (
	<span class="hljs-string">"fmt"</span>
	<span class="hljs-string">"slices"</span>
)

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {
	s := []<span class="hljs-type">string</span>{<span class="hljs-string">"a"</span>, <span class="hljs-string">"b"</span>, <span class="hljs-string">"c"</span>, <span class="hljs-string">"d"</span>, <span class="hljs-string">"e"</span>}

	itr := slices.Chunk(s, <span class="hljs-number">3</span>)

	<span class="hljs-keyword">for</span> s := <span class="hljs-keyword">range</span> itr {
		fmt.Println(s)
	}
}

<span class="hljs-comment">// [a b c]</span>
<span class="hljs-comment">// [d e]</span>
</code></pre>
<h2>maps</h2>
<h3>All</h3>
<p>map から key-value ペアのイテレータを返す。
ただし、順番は保証されていない。</p>
<pre><code class="hljs language-go"><span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> (
	<span class="hljs-string">"fmt"</span>
	<span class="hljs-string">"maps"</span>
)

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {
	m := <span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>]<span class="hljs-type">string</span>{
		<span class="hljs-number">1</span>: <span class="hljs-string">"a"</span>,
		<span class="hljs-number">2</span>: <span class="hljs-string">"b"</span>,
		<span class="hljs-number">3</span>: <span class="hljs-string">"c"</span>,
	}

	itr := maps.All(m)

	<span class="hljs-keyword">for</span> i, v := <span class="hljs-keyword">range</span> itr {
		fmt.Println(i, v)
	}
}

<span class="hljs-comment">// 2 b</span>
<span class="hljs-comment">// 3 c</span>
<span class="hljs-comment">// 1 a</span>
</code></pre>
<h3>Keys</h3>
<p>map の key に対するイテレータを返す。
ただし、順番は保証されていない。</p>
<pre><code class="hljs language-go"><span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> (
	<span class="hljs-string">"fmt"</span>
	<span class="hljs-string">"maps"</span>
)

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {
	m := <span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>]<span class="hljs-type">string</span>{
		<span class="hljs-number">1</span>: <span class="hljs-string">"a"</span>,
		<span class="hljs-number">2</span>: <span class="hljs-string">"b"</span>,
		<span class="hljs-number">3</span>: <span class="hljs-string">"c"</span>,
	}

	itr := maps.Keys(m)

	<span class="hljs-keyword">for</span> k := <span class="hljs-keyword">range</span> itr {
		fmt.Println(k)
	}
}

<span class="hljs-comment">// 3</span>
<span class="hljs-comment">// 1</span>
<span class="hljs-comment">// 2</span>
</code></pre>
<h3>Values</h3>
<p>map の value に対するイテレータを返す。
ただし、順番は保証されていない。</p>
<pre><code class="hljs language-go"><span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> (
	<span class="hljs-string">"fmt"</span>
	<span class="hljs-string">"maps"</span>
)

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {
	m := <span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>]<span class="hljs-type">string</span>{
		<span class="hljs-number">1</span>: <span class="hljs-string">"a"</span>,
		<span class="hljs-number">2</span>: <span class="hljs-string">"b"</span>,
		<span class="hljs-number">3</span>: <span class="hljs-string">"c"</span>,
	}

	itr := maps.Values(m)

	<span class="hljs-keyword">for</span> v := <span class="hljs-keyword">range</span> itr {
		fmt.Println(v)
	}
}

<span class="hljs-comment">// c</span>
<span class="hljs-comment">// a</span>
<span class="hljs-comment">// b</span>
</code></pre>
<h3>Insert</h3>
<p>イテレータから key と value のペアを既存の map に追加する。
重複する key がある場合、上書きされる。</p>
<pre><code class="hljs language-go"><span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> (
	<span class="hljs-string">"fmt"</span>
	<span class="hljs-string">"maps"</span>
)

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {
	m := <span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>]<span class="hljs-type">string</span>{
		<span class="hljs-number">1</span>: <span class="hljs-string">"a"</span>,
		<span class="hljs-number">2</span>: <span class="hljs-string">"b"</span>,
		<span class="hljs-number">3</span>: <span class="hljs-string">"c"</span>,
	}

	m2 := <span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>]<span class="hljs-type">string</span>{
		<span class="hljs-number">3</span>: <span class="hljs-string">"d"</span>,
		<span class="hljs-number">4</span>: <span class="hljs-string">"e"</span>,
		<span class="hljs-number">5</span>: <span class="hljs-string">"f"</span>,
	}

	maps.Insert(m, maps.All(m2))

	fmt.Println(m)
}

<span class="hljs-comment">// map[1:a 2:b 3:d 4:e 5:f]</span>
</code></pre>
<h3>Collect</h3>
<p>イテレータから新しい map に key-value のペアを収集する。</p>
<p>下記は、<code>iter.Seq[K, V]</code> のイテレータを <code>map[K]V</code> の map に集約している。</p>
<pre><code class="hljs language-go"><span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> (
	<span class="hljs-string">"fmt"</span>
	<span class="hljs-string">"maps"</span>
)

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {
	m := <span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>]<span class="hljs-type">string</span>{
		<span class="hljs-number">1</span>: <span class="hljs-string">"a"</span>,
		<span class="hljs-number">2</span>: <span class="hljs-string">"b"</span>,
		<span class="hljs-number">3</span>: <span class="hljs-string">"c"</span>,
	}

	itr := maps.All(m)
	m2 := maps.Collect(itr)

	fmt.Println(m2)
}

<span class="hljs-comment">// map[1:a 2:b 3:c]</span>
</code></pre>5:["$","article",null,{"style":{"maxWidth":"1000px","margin":"0 auto","padding":"0 2rem 2rem"},"children":[["$","h1",null,{"children":"golangのイテレータを触ってみる"}],["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$10"}}]]}]
b:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
7:null
9:{"metadata":[["$","title","0",{"children":"MyDocs"}],["$","meta","1",{"name":"description","content":"A simple SSG blog built with Next.js"}]],"error":null,"digest":"$undefined"}
e:"$9:metadata"
