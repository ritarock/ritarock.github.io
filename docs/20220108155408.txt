1:"$Sreact.fragment"
2:I[9119,["119","static/chunks/119-2ee48d1f375d3fd9.js","974","static/chunks/app/page-ee49d1414c09869d.js"],""]
3:I[730,[],""]
4:I[2392,[],""]
6:I[3811,[],"OutletBoundary"]
8:I[4338,[],"AsyncMetadataOutlet"]
a:I[3811,[],"ViewportBoundary"]
c:I[3811,[],"MetadataBoundary"]
d:"$Sreact.suspense"
f:I[9426,[],""]
:HL["/_next/static/css/5e22d3fe14facb50.css","style"]
0:{"P":null,"b":"OVt0H6to9QSgb-YS8ef-u","p":"","c":["","docs","20220108155408"],"i":false,"f":[[["",{"children":["docs",{"children":[["slug","20220108155408","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/5e22d3fe14facb50.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"ja","children":["$","body",null,{"style":{"backgroundColor":"ghostwhite","margin":0,"minHeight":"100vh"},"children":[["$","header",null,{"style":{"padding":"1rem 0","marginBottom":"0.25rem"},"children":["$","div",null,{"style":{"maxWidth":"1000px","margin":"0 auto","padding":"0 2rem"},"children":["$","$L2",null,{"href":"/","style":{"fontSize":"1.5rem","fontWeight":"bold","textDecoration":"none","color":"#333"},"children":"MyDocs"}]}]}],["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]]}]}]]}],{"children":["docs",["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["slug","20220108155408","d"],["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L5",null,["$","$L6",null,{"children":["$L7",["$","$L8",null,{"promise":"$@9"}]]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,[["$","$La",null,{"children":"$Lb"}],null],["$","$Lc",null,{"children":["$","div",null,{"hidden":true,"children":["$","$d",null,{"fallback":null,"children":"$Le"}]}]}]]}],false]],"m":"$undefined","G":["$f",[]],"s":false,"S":true}
10:T4b2f,<h2>ent</h2>
<h3>インストール</h3>
<p>ent と DB の client をインストールする。</p>
<pre><code class="hljs language-bash">$ go get -d entgo.io/ent/cmd/ent
$ go get github.com/mattn/go-sqlite3
</code></pre>
<h3>スキーマの作成</h3>
<pre><code class="hljs language-bash">$ go run entgo.io/ent/cmd/ent init Todo
</code></pre>
<p><code>ent/schema/todo.go</code> を編集する。</p>
<pre><code class="hljs language-go"><span class="hljs-comment">// Fields of the Todo.</span>
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(Todo)</span></span> Fields() []ent.Field {
	<span class="hljs-keyword">return</span> []ent.Field{
		field.String(<span class="hljs-string">"name"</span>).
			Default(<span class="hljs-string">""</span>),
		field.Bool(<span class="hljs-string">"status"</span>).
			Default(<span class="hljs-literal">false</span>),
		field.Time(<span class="hljs-string">"created_at"</span>).
			Default(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> time.Time {
				<span class="hljs-keyword">return</span> time.Now()
			}),
	}
}
</code></pre>
<h3>コード生成</h3>
<p>shema ファイルを元にコードを生成するので編集後は実行する必要がある。</p>
<pre><code class="hljs language-bash">$ go generate ./ent
</code></pre>
<h3>マイグレーション部分を実装</h3>
<pre><code class="hljs language-go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {

	client, err := ent.Open(<span class="hljs-string">"sqlite3"</span>, <span class="hljs-string">"file:todo.sqlite?cache=shared&#x26;_fk=1"</span>)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		log.Fatalf(<span class="hljs-string">"faild opening connection to sqlit"</span>)
	}
	<span class="hljs-keyword">defer</span> client.Close()

	<span class="hljs-keyword">if</span> err := client.Schema.Create(context.Background()); err != <span class="hljs-literal">nil</span> {
		log.Fatalf(<span class="hljs-string">"faild creating schema"</span>)
	}
}
</code></pre>
<h2>echo</h2>
<p><code>Todo</code> の struct を定義。</p>
<pre><code class="hljs language-go"><span class="hljs-keyword">type</span> Todo <span class="hljs-keyword">struct</span> {
	Name   <span class="hljs-type">string</span> <span class="hljs-string">`json:"name"`</span>
	Status <span class="hljs-type">bool</span>   <span class="hljs-string">`json:"status"`</span>
}
</code></pre>
<p>今回は CRUD 可能な Todo アプリを作りたいので以下のハンドラを作成する。</p>
<pre><code class="hljs language-go">e := echo.New()

e.POST(<span class="hljs-string">"/todo"</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c echo.Context)</span></span> <span class="hljs-type">error</span> {
	<span class="hljs-keyword">return</span> c.JSON(http.StatusOK, <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>{<span class="hljs-string">"message"</span>: <span class="hljs-string">"ok"</span>})
})
e.GET(<span class="hljs-string">"/todo/:id"</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c echo.Context)</span></span> <span class="hljs-type">error</span> {
	<span class="hljs-keyword">return</span> c.JSON(http.StatusOK, <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>{<span class="hljs-string">"message"</span>: <span class="hljs-string">"ok"</span>})
})
e.PUT(<span class="hljs-string">"/todo/:id"</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c echo.Context)</span></span> <span class="hljs-type">error</span> {
	<span class="hljs-keyword">return</span> c.JSON(http.StatusOK, <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>{<span class="hljs-string">"message"</span>: <span class="hljs-string">"ok"</span>})
})
e.DELETE(<span class="hljs-string">"/todo/:id"</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c echo.Context)</span></span> <span class="hljs-type">error</span> {
	<span class="hljs-keyword">return</span> c.JSON(http.StatusOK, <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>{<span class="hljs-string">"message"</span>: <span class="hljs-string">"ok"</span>})
})

e.Logger.Fatal(e.Start(<span class="hljs-string">":8080"</span>))
</code></pre>
<h2>create を実装</h2>
<pre><code class="hljs language-go">e.POST(<span class="hljs-string">"/todo"</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c echo.Context)</span></span> <span class="hljs-type">error</span> {
	t := &#x26;Todo{}
	<span class="hljs-keyword">if</span> err := c.Bind(t); err != <span class="hljs-literal">nil</span> {
		<span class="hljs-keyword">return</span> c.JSON(http.StatusInternalServerError, <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>{
			<span class="hljs-string">"message"</span>: http.StatusText(http.StatusInternalServerError),
		})
	}
	todo, err := client.Todo.
		Create().
		SetName(t.Name).
		SetStatus(t.Status).
		SetCreatedAt(time.Now()).
		Save(context.Background())
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		<span class="hljs-keyword">return</span> c.JSON(http.StatusInternalServerError, <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>{
			<span class="hljs-string">"message"</span>: http.StatusText(http.StatusInternalServerError),
		})
	}

	<span class="hljs-keyword">return</span> c.JSON(http.StatusOK, <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>{
		<span class="hljs-string">"name"</span>:   todo.Name,
		<span class="hljs-string">"status"</span>: strconv.FormatBool(todo.Status),
	})
})
</code></pre>
<p>実行。</p>
<pre><code class="hljs language-bash">$ curl --location --request POST <span class="hljs-string">'http://localhost:8080/todo'</span> \
       --header <span class="hljs-string">'Content-Type: application/json'</span> \
       --data-raw <span class="hljs-string">'{"name": "todo1"}'</span>
{<span class="hljs-string">"name"</span>:<span class="hljs-string">"todo1"</span>,<span class="hljs-string">"status"</span>:<span class="hljs-string">"false"</span>}
</code></pre>
<h2>READ を実装</h2>
<pre><code class="hljs language-go">e.GET(<span class="hljs-string">"/todo/:id"</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c echo.Context)</span></span> <span class="hljs-type">error</span> {
	id, _ := strconv.Atoi(c.Param(<span class="hljs-string">"id"</span>))

	todo, err := client.Todo.
		Query().
		Where(todo.ID(id)).
		Only(context.Background())
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		<span class="hljs-keyword">return</span> c.JSON(http.StatusInternalServerError, <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>{
			<span class="hljs-string">"message"</span>: http.StatusText(http.StatusInternalServerError),
		})
	}
	<span class="hljs-keyword">return</span> c.JSON(http.StatusOK, <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>{
		<span class="hljs-string">"name"</span>:       todo.Name,
		<span class="hljs-string">"status"</span>:     strconv.FormatBool(todo.Status),
		<span class="hljs-string">"created_at"</span>: todo.CreatedAt.String(),
	})
})
</code></pre>
<p>実行。</p>
<pre><code class="hljs language-bash">$ curl http://localhost:8080/todo/1
{<span class="hljs-string">"created_at"</span>:<span class="hljs-string">"2022-01-09 15:30:02.059031 +0900 +0900"</span>,<span class="hljs-string">"name"</span>:<span class="hljs-string">"todo1"</span>,<span class="hljs-string">"status"</span>:<span class="hljs-string">"false"</span>}
</code></pre>
<h2>UPDATE を実装</h2>
<pre><code class="hljs language-go">e.PUT(<span class="hljs-string">"/todo/:id"</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c echo.Context)</span></span> <span class="hljs-type">error</span> {
	id, _ := strconv.Atoi(c.Param(<span class="hljs-string">"id"</span>))
	t := &#x26;Todo{}
	<span class="hljs-keyword">if</span> err := c.Bind(t); err != <span class="hljs-literal">nil</span> {
		<span class="hljs-keyword">return</span> c.JSON(http.StatusInternalServerError, <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>{
			<span class="hljs-string">"message"</span>: http.StatusText(http.StatusInternalServerError),
		})
	}

	todo, err := client.Todo.
		UpdateOneID(id).
		SetName(t.Name).
		SetStatus(t.Status).
		Save(context.Background())
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		<span class="hljs-keyword">return</span> c.JSON(http.StatusInternalServerError, <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>{
			<span class="hljs-string">"message"</span>: http.StatusText(http.StatusInternalServerError),
		})
	}

	<span class="hljs-keyword">return</span> c.JSON(http.StatusOK, <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>{
		<span class="hljs-string">"name"</span>:       todo.Name,
		<span class="hljs-string">"status"</span>:     strconv.FormatBool(todo.Status),
		<span class="hljs-string">"created_at"</span>: todo.CreatedAt.String(),
	})
})
</code></pre>
<pre><code class="hljs language-bash">$ curl --location --request PUT <span class="hljs-string">'http://localhost:8080/todo/1'</span> \
       --header <span class="hljs-string">'Content-Type: application/json'</span> \
       --data-raw <span class="hljs-string">'{"name": "todo1", "status": true}'</span>
{<span class="hljs-string">"created_at"</span>:<span class="hljs-string">"2022-01-09 15:30:02.059031 +0900 +0900"</span>,<span class="hljs-string">"name"</span>:<span class="hljs-string">"todo1"</span>,<span class="hljs-string">"status"</span>:<span class="hljs-string">"true"</span>}
</code></pre>
<h2>DELETE を実装</h2>
<pre><code class="hljs language-go">e.DELETE(<span class="hljs-string">"/todo/:id"</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c echo.Context)</span></span> <span class="hljs-type">error</span> {
	id, _ := strconv.Atoi(c.Param(<span class="hljs-string">"id"</span>))
	err := client.Todo.
		DeleteOneID(id).
		Exec(context.Background())
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		<span class="hljs-keyword">return</span> c.JSON(http.StatusInternalServerError, <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>{
			<span class="hljs-string">"message"</span>: http.StatusText(http.StatusInternalServerError),
		})
	}

	<span class="hljs-keyword">return</span> c.JSON(http.StatusOK, <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>{
		<span class="hljs-string">"message"</span>: fmt.Sprintf(<span class="hljs-string">"DELETE: %v"</span>, id),
	})
})
</code></pre>
<p>実行。</p>
<pre><code class="hljs language-bash">curl --location --request DELETE <span class="hljs-string">'http://localhost:8080/todo/1'</span>
{<span class="hljs-string">"message"</span>:<span class="hljs-string">"DELETE: 1"</span>}
</code></pre>
<h3>コード全体</h3>
<pre><code class="hljs language-go"><span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> (
	<span class="hljs-string">"context"</span>
	<span class="hljs-string">"echo-ent-crud/ent"</span>
	<span class="hljs-string">"echo-ent-crud/ent/todo"</span>
	<span class="hljs-string">"fmt"</span>
	<span class="hljs-string">"log"</span>
	<span class="hljs-string">"net/http"</span>
	<span class="hljs-string">"strconv"</span>
	<span class="hljs-string">"time"</span>

	<span class="hljs-string">"github.com/labstack/echo/v4"</span>
	_ <span class="hljs-string">"github.com/mattn/go-sqlite3"</span>
)

<span class="hljs-keyword">type</span> Todo <span class="hljs-keyword">struct</span> {
	Name   <span class="hljs-type">string</span> <span class="hljs-string">`json:"name"`</span>
	Status <span class="hljs-type">bool</span>   <span class="hljs-string">`json:"status"`</span>
}

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {
	client, err := ent.Open(<span class="hljs-string">"sqlite3"</span>, <span class="hljs-string">"file:todo.sqlite?cache=shared&#x26;_fk=1"</span>)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		log.Fatalf(<span class="hljs-string">"faild opening connection to sqlit"</span>)
	}
	<span class="hljs-keyword">defer</span> client.Close()

	<span class="hljs-keyword">if</span> err := client.Schema.Create(context.Background()); err != <span class="hljs-literal">nil</span> {
		log.Fatalf(<span class="hljs-string">"faild creating schema"</span>)
	}

	e := echo.New()

	e.POST(<span class="hljs-string">"/todo"</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c echo.Context)</span></span> <span class="hljs-type">error</span> {
		t := &#x26;Todo{}
		<span class="hljs-keyword">if</span> err := c.Bind(t); err != <span class="hljs-literal">nil</span> {
			<span class="hljs-keyword">return</span> c.JSON(http.StatusInternalServerError, <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>{
				<span class="hljs-string">"message"</span>: http.StatusText(http.StatusInternalServerError),
			})
		}
		todo, err := client.Todo.
			Create().
			SetName(t.Name).
			SetStatus(t.Status).
			SetCreatedAt(time.Now()).
			Save(context.Background())
		<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
			<span class="hljs-keyword">return</span> c.JSON(http.StatusInternalServerError, <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>{
				<span class="hljs-string">"message"</span>: http.StatusText(http.StatusInternalServerError),
			})
		}

		<span class="hljs-keyword">return</span> c.JSON(http.StatusOK, <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>{
			<span class="hljs-string">"name"</span>:   todo.Name,
			<span class="hljs-string">"status"</span>: strconv.FormatBool(todo.Status),
		})
	})

	e.GET(<span class="hljs-string">"/todo/:id"</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c echo.Context)</span></span> <span class="hljs-type">error</span> {
		id, _ := strconv.Atoi(c.Param(<span class="hljs-string">"id"</span>))

		todo, err := client.Todo.
			Query().
			Where(todo.ID(id)).
			Only(context.Background())
		<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
			<span class="hljs-keyword">return</span> c.JSON(http.StatusInternalServerError, <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>{
				<span class="hljs-string">"message"</span>: http.StatusText(http.StatusInternalServerError),
			})
		}
		<span class="hljs-keyword">return</span> c.JSON(http.StatusOK, <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>{
			<span class="hljs-string">"name"</span>:       todo.Name,
			<span class="hljs-string">"status"</span>:     strconv.FormatBool(todo.Status),
			<span class="hljs-string">"created_at"</span>: todo.CreatedAt.String(),
		})
	})

	e.PUT(<span class="hljs-string">"/todo/:id"</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c echo.Context)</span></span> <span class="hljs-type">error</span> {
		id, _ := strconv.Atoi(c.Param(<span class="hljs-string">"id"</span>))
		t := &#x26;Todo{}
		<span class="hljs-keyword">if</span> err := c.Bind(t); err != <span class="hljs-literal">nil</span> {
			<span class="hljs-keyword">return</span> c.JSON(http.StatusInternalServerError, <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>{
				<span class="hljs-string">"message"</span>: http.StatusText(http.StatusInternalServerError),
			})
		}

		todo, err := client.Todo.
			UpdateOneID(id).
			SetName(t.Name).
			SetStatus(t.Status).
			Save(context.Background())
		<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
			<span class="hljs-keyword">return</span> c.JSON(http.StatusInternalServerError, <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>{
				<span class="hljs-string">"message"</span>: http.StatusText(http.StatusInternalServerError),
			})
		}

		<span class="hljs-keyword">return</span> c.JSON(http.StatusOK, <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>{
			<span class="hljs-string">"name"</span>:       todo.Name,
			<span class="hljs-string">"status"</span>:     strconv.FormatBool(todo.Status),
			<span class="hljs-string">"created_at"</span>: todo.CreatedAt.String(),
		})
	})

	e.DELETE(<span class="hljs-string">"/todo/:id"</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c echo.Context)</span></span> <span class="hljs-type">error</span> {
		id, _ := strconv.Atoi(c.Param(<span class="hljs-string">"id"</span>))
		err := client.Todo.
			DeleteOneID(id).
			Exec(context.Background())
		<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
			<span class="hljs-keyword">return</span> c.JSON(http.StatusInternalServerError, <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>{
				<span class="hljs-string">"message"</span>: http.StatusText(http.StatusInternalServerError),
			})
		}

		<span class="hljs-keyword">return</span> c.JSON(http.StatusOK, <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>{
			<span class="hljs-string">"message"</span>: fmt.Sprintf(<span class="hljs-string">"DELETE: %v"</span>, id),
		})
	})

	e.Logger.Fatal(e.Start(<span class="hljs-string">":8080"</span>))
}
</code></pre>5:["$","article",null,{"style":{"maxWidth":"1000px","margin":"0 auto","padding":"0 2rem 2rem"},"children":[["$","h1",null,{"children":"entとechoでAPIを作る"}],["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$10"}}]]}]
b:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
7:null
9:{"metadata":[["$","title","0",{"children":"MyDocs"}],["$","meta","1",{"name":"description","content":"A simple SSG blog built with Next.js"}]],"error":null,"digest":"$undefined"}
e:"$9:metadata"
