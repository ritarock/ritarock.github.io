1:"$Sreact.fragment"
2:I[9119,["119","static/chunks/119-2ee48d1f375d3fd9.js","974","static/chunks/app/page-ee49d1414c09869d.js"],""]
3:I[730,[],""]
4:I[2392,[],""]
6:I[3811,[],"OutletBoundary"]
8:I[4338,[],"AsyncMetadataOutlet"]
a:I[3811,[],"ViewportBoundary"]
c:I[3811,[],"MetadataBoundary"]
d:"$Sreact.suspense"
f:I[9426,[],""]
:HL["/_next/static/css/5e22d3fe14facb50.css","style"]
0:{"P":null,"b":"OVt0H6to9QSgb-YS8ef-u","p":"","c":["","docs","20230223173604"],"i":false,"f":[[["",{"children":["docs",{"children":[["slug","20230223173604","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/5e22d3fe14facb50.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"ja","children":["$","body",null,{"style":{"backgroundColor":"ghostwhite","margin":0,"minHeight":"100vh"},"children":[["$","header",null,{"style":{"padding":"1rem 0","marginBottom":"0.25rem"},"children":["$","div",null,{"style":{"maxWidth":"1000px","margin":"0 auto","padding":"0 2rem"},"children":["$","$L2",null,{"href":"/","style":{"fontSize":"1.5rem","fontWeight":"bold","textDecoration":"none","color":"#333"},"children":"MyDocs"}]}]}],["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]]}]}]]}],{"children":["docs",["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["slug","20230223173604","d"],["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L5",null,["$","$L6",null,{"children":["$L7",["$","$L8",null,{"promise":"$@9"}]]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,[["$","$La",null,{"children":"$Lb"}],null],["$","$Lc",null,{"children":["$","div",null,{"hidden":true,"children":["$","$d",null,{"fallback":null,"children":"$Le"}]}]}]]}],false]],"m":"$undefined","G":["$f",[]],"s":false,"S":true}
10:T1e38,<h2>database の準備</h2>
<pre><code class="hljs language-bash">$ go run -mod=mod entgo.io/ent/cmd/ent new Todo
</code></pre>
<p>schema の設定。</p>
<pre><code class="hljs language-go"><span class="hljs-comment">// Fields of the Todo.</span>
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(Todo)</span></span> Fields() []ent.Field {
	<span class="hljs-keyword">return</span> []ent.Field{
		field.String(<span class="hljs-string">"title"</span>),
		field.String(<span class="hljs-string">"note"</span>),
		field.Bool(<span class="hljs-string">"completed"</span>).Default(<span class="hljs-literal">false</span>),
		field.Time(<span class="hljs-string">"created_at"</span>).Default(time.Now()),
		field.Time(<span class="hljs-string">"updated_at"</span>).Default(time.Now()),
	}
}
</code></pre>
<pre><code class="hljs language-bash">$ go generate ./ent
</code></pre>
<h2>gqlgen</h2>
<pre><code class="hljs language-bash">$ <span class="hljs-built_in">printf</span> <span class="hljs-string">'// +build tools\npackage tools\nimport (_ "github.com/99designs/gqlgen"\n _ "github.com/99designs/gqlgen/graphql/introspection")'</span> | gofmt > tools.go
$ go mod tidy
$ go run github.com/99designs/gqlgen init

</code></pre>
<p><code>graph/</code> に生成されたファイル。</p>
<pre><code class="hljs language-bash">tree graph/
graph/
├── generated.go <span class="hljs-comment"># 自動生成</span>
├── model
│   └── models_gen.go <span class="hljs-comment"># 自動生成</span>
├── resolver.go
├── schema.graphqls
└── schema.resolvers.go
</code></pre>
<p>ファイルは <code>resolver.go</code>、<code>schema.graphqls</code>、<code>schema.resolvers.go</code> で良さそう。
プロジェクト直下に生成された <code>gqlgen.yml</code> は一旦放置。</p>
<h3>スキーマ定義</h3>
<p><code>schema.graphqls / schema.resolvers.go</code> を削除し、新規にスキーマ定義ファイルを作る。</p>
<p>共有インターフェイス Node を定義する。プライマリーキーを持つ場合は Node インターフェイスを作るのがお作法らしい。また、独自の型として Datetime を定義する。</p>
<pre><code class="hljs language-common.graphqls">interface Node {
    id: ID!
}

scalar Datetime
</code></pre>
<p>次に Todo スキーマを定義する。</p>
<pre><code class="hljs language-todo.graphqls">type Todo implements Node {
    id: ID!
    title: String!
    note: String!
    completed: Boolean!
    created_at: Datetime!
    updated_at: Datetime!
}
</code></pre>
<p>最後に query と mutation を定義する。</p>
<pre><code class="hljs language-query.graphqls">type Query {
    todos: [Todo!]!
}
</code></pre>
<pre><code class="hljs language-mutation.graphqls">type Mutation {
    createTodo(input: NewTodo!): Todo!
}

input NewTodo {
    id: ID
    title: String!
    note: String!
    completed: Boolean
    created_at: Datetime
    updated_at: Datetime
}
</code></pre>
<h3>コードの生成</h3>
<pre><code class="hljs language-bash">$ go run github.com/99designs/gqlgen
</code></pre>
<h3>実装</h3>
<p>resolver から参照できるようにフィールドを追加する。</p>
<pre><code class="hljs language-go"><span class="hljs-keyword">type</span> Resolver <span class="hljs-keyword">struct</span> {
	EntClient *ent.Client
}
</code></pre>
<p><code>query.resolvers.go</code> を実装する。</p>
<pre><code class="hljs language-go"><span class="hljs-comment">// Todos is the resolver for the todos field.</span>
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(r *queryResolver)</span></span> Todos(ctx context.Context) ([]*model.Todo, <span class="hljs-type">error</span>) {
	todos := []*model.Todo{}
	searched, _ := r.EntClient.Todo.Query().All(ctx)
	<span class="hljs-keyword">for</span> _, todo := <span class="hljs-keyword">range</span> searched {
		todos = <span class="hljs-built_in">append</span>(todos, &#x26;model.Todo{
			ID:        strconv.Itoa(todo.ID),
			Title:     todo.Title,
			Note:      todo.Note,
			Completed: todo.Completed,
			CreatedAt: todo.CreatedAt.String(),
			UpdatedAt: todo.UpdatedAt.String(),
		})
	}
	<span class="hljs-keyword">return</span> todos, <span class="hljs-literal">nil</span>
}
</code></pre>
<p><code>mutation.resolvers.go</code> を実装する。</p>
<pre><code class="hljs language-go"><span class="hljs-comment">// CreateTodo is the resolver for the createTodo field.</span>
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(r *mutationResolver)</span></span> CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, <span class="hljs-type">error</span>) {
	created, _ := r.EntClient.Todo.Create().
		SetTitle(input.Title).
		SetNote(input.Note).
		Save(ctx)

	<span class="hljs-keyword">return</span> &#x26;model.Todo{
		ID:        strconv.Itoa(created.ID),
		Title:     created.Title,
		Note:      created.Note,
		Completed: created.Completed,
		CreatedAt: created.CreatedAt.String(),
		UpdatedAt: created.UpdatedAt.String(),
	}, <span class="hljs-literal">nil</span>
}
</code></pre>
<h2>server の実装</h2>
<p>最後は echo で実行できるようにする。<code>server.go</code> は不要なので削除。</p>
<pre><code class="hljs language-main.go">package main

import (
	"context"
	"gqlgen-todo/ent"
	"gqlgen-todo/graph"
	"net/http"

	"github.com/99designs/gqlgen/graphql/handler"
	"github.com/99designs/gqlgen/graphql/playground"
	"github.com/labstack/echo/v4"
	_ "github.com/mattn/go-sqlite3"
)

const (
	DRIVER      = "sqlite3"
	DATA_SOURCE = "file:ent?mode=memory&#x26;cache=shared&#x26;_fk=1"
)

func main() {
	ctx := context.Background()
	client, _ := ent.Open(DRIVER, DATA_SOURCE)
	client.Schema.Create(ctx)

	e := echo.New()
	e.GET("/health", func(c echo.Context) error {
		return c.String(http.StatusOK, "ok")
	})

	graphqlHandler := handler.NewDefaultServer(
		graph.NewExecutableSchema(
			graph.Config{
				Resolvers: &#x26;graph.Resolver{
					EntClient: client,
				},
			},
		),
	)
	playgroudHandler := playground.Handler("GraphQL", "/query")

	e.POST("/query", func(c echo.Context) error {
		graphqlHandler.ServeHTTP(c.Response(), c.Request())
		return nil
	})

	e.GET("playground", func(c echo.Context) error {
		playgroudHandler.ServeHTTP(c.Response(), c.Request())
		return nil
	})

	e.Logger.Fatal(e.Start(":8080"))
}
</code></pre>
<h3>試す</h3>
<pre><code class="hljs language-query">mutation {
  createTodo(input: {
    title: "title1",
    note: "note1"
  }) {
    id
    title
    note
    completed
    created_at
    updated_at
  }
}

{
  "data": {
    "createTodo": {
      "id": "1",
      "title": "title1",
      "note": "note1",
      "completed": false,
      "created_at": "2023-02-23 17:33:13",
      "updated_at": "2023-02-23 17:33:13"
    }
  }
}
</code></pre>
<pre><code class="hljs language-query">{
  todos {
    id
    title
    note
    completed
    created_at
    updated_at
  }
}

{
  "data": {
    "todos": [
      {
        "id": "1",
        "title": "title1",
        "note": "note1",
        "completed": false,
        "created_at": "2023-02-23 17:33:13",
        "updated_at": "2023-02-23 17:33:13"
      },
      {
        "id": "2",
        "title": "title2",
        "note": "note2",
        "completed": false,
        "created_at": "2023-02-23 17:33:13",
        "updated_at": "2023-02-23 17:33:13"
      },
      {
        "id": "3",
        "title": "title3",
        "note": "note3",
        "completed": false,
        "created_at": "2023-02-23 17:33:13",
        "updated_at": "2023-02-23 17:33:13"
      }
    ]
  }
}
</code></pre>5:["$","article",null,{"style":{"maxWidth":"1000px","margin":"0 auto","padding":"0 2rem 2rem"},"children":[["$","h1",null,{"children":"gqlgenを触る"}],["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$10"}}]]}]
b:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
7:null
9:{"metadata":[["$","title","0",{"children":"MyDocs"}],["$","meta","1",{"name":"description","content":"A simple SSG blog built with Next.js"}]],"error":null,"digest":"$undefined"}
e:"$9:metadata"
