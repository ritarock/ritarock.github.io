1:"$Sreact.fragment"
2:I[9119,["119","static/chunks/119-2ee48d1f375d3fd9.js","974","static/chunks/app/page-ee49d1414c09869d.js"],""]
3:I[730,[],""]
4:I[2392,[],""]
6:I[3811,[],"OutletBoundary"]
8:I[4338,[],"AsyncMetadataOutlet"]
a:I[3811,[],"ViewportBoundary"]
c:I[3811,[],"MetadataBoundary"]
d:"$Sreact.suspense"
f:I[9426,[],""]
:HL["/_next/static/css/5e22d3fe14facb50.css","style"]
0:{"P":null,"b":"nvFx_FV4eLnf8EmFzYlmi","p":"","c":["","docs","20211112233257"],"i":false,"f":[[["",{"children":["docs",{"children":[["slug","20211112233257","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/5e22d3fe14facb50.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"ja","children":["$","body",null,{"style":{"backgroundColor":"ghostwhite","margin":0,"minHeight":"100vh"},"children":[["$","header",null,{"style":{"padding":"1rem 0","marginBottom":"0.25rem"},"children":["$","div",null,{"style":{"maxWidth":"1000px","margin":"0 auto","padding":"0 2rem"},"children":["$","$L2",null,{"href":"/","style":{"fontSize":"1.5rem","fontWeight":"bold","textDecoration":"none","color":"#333"},"children":"MyDocs"}]}]}],["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]]}]}]]}],{"children":["docs",["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["slug","20211112233257","d"],["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L5",null,["$","$L6",null,{"children":["$L7",["$","$L8",null,{"promise":"$@9"}]]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,[["$","$La",null,{"children":"$Lb"}],null],["$","$Lc",null,{"children":["$","div",null,{"hidden":true,"children":["$","$d",null,{"fallback":null,"children":"$Le"}]}]}]]}],false]],"m":"$undefined","G":["$f",[]],"s":false,"S":true}
10:T1286,<p>今まで VSCode の <code>Generate Unit Tests For Function</code> で作成してなんとなくで書いてたけどちゃんと勉強した。</p>
<p><a href="https://github.com/andmorefine/learn-go-with-tests">https://github.com/andmorefine/learn-go-with-tests</a> を使って勉強した。日本語訳が微妙だったので英語版がよかった。</p>
<p>以下メモ。</p>
<ul>
<li><code>t.Helper()</code> を使えば失敗した行が関数呼び出し側になる</li>
<li>Benchmark 実行には <code>go test -bench=.</code> を実行する</li>
<li>カバレッジを確認するには <code>go test -cover</code> を実行する</li>
<li>スライスの test は <code>reflect.DeepEqual</code> を使って変数を比較する(型安全ではないので注意)。</li>
<li>マップは nil に書き込もうとするとランタイムパニックになるので初期化に気をつける
<ul>
<li>NG: <code>var m map[string]string</code></li>
<li>OK: <code>var dictonary = map[string]string{}</code> もしくは <code>var dictonary = make(map[string]string)</code></li>
</ul>
</li>
<li>標準ライブラリに <code>net/http/httptest</code> があってこれで模擬 HTTP サーバを作れる</li>
<li>'入力 X のとき出力 Y を期待する' というテストを作るときはテーブルベースのテストを使う</li>
</ul>
<h2>setup / teardown</h2>
<p>テストを行う際に、前処理と後処理を書きたい場合がある。</p>
<p>その場合は、<code>TestMain</code> を実装する。</p>
<pre><code class="hljs language-go"><span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> (
	<span class="hljs-string">"log"</span>
	<span class="hljs-string">"os"</span>
	<span class="hljs-string">"testing"</span>
)

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestMain</span><span class="hljs-params">(m *testing.M)</span></span> {
	log.Println(<span class="hljs-string">"Before"</span>)
	ret := m.Run()
	log.Println(<span class="hljs-string">"After"</span>)
	os.Exit(ret)
}

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Test_A</span><span class="hljs-params">(t *testing.T)</span></span> {
	log.Println(<span class="hljs-string">"Test_A running"</span>)
}

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Test_B</span><span class="hljs-params">(t *testing.T)</span></span> {
	log.Println(<span class="hljs-string">"Test_B running"</span>)
}

<span class="hljs-comment">// 2024/08/14 15:40:10 Before</span>
<span class="hljs-comment">// 2024/08/14 15:40:10 Test_A running</span>
<span class="hljs-comment">// 2024/08/14 15:40:10 Test_B running</span>
<span class="hljs-comment">// PASS</span>
<span class="hljs-comment">// 2024/08/14 15:40:10 After</span>
</code></pre>
<p>TestMain では、<code>testing.M</code> を引数に取る必要がある。</p>
<p>前処理と後処理の最中にエラーが発生した場合には、<code>os.Exit</code> で以上終了したことを伝える必要がある。
終了コード「0」以外で終了する場合は、<code>log.Fatalf</code> を使うと便利。</p>
<pre><code class="hljs language-go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestMain</span><span class="hljs-params">(m *testing.M)</span></span> {
  <span class="hljs-keyword">if</span> err := setup(); err != <span class="hljs-literal">nil</span> {
    log.Fatalf(<span class="hljs-string">"failed to setup: "</span>, err)
  }

	ret := m.Run()

  <span class="hljs-keyword">if</span> err := teardown(); err != <span class="hljs-literal">nil</span> {
    log.Fatalf(<span class="hljs-string">"failed to teardown: "</span>, err)
  }

	os.Exit(ret)
}
</code></pre>
<h2>カバレッジ</h2>
<p>テストの進捗を示す指標としてカバレッジがある。</p>
<p>テストを実行した際に、テスト対象のプログラムが、テストによりどれくらいパスしたかを網羅率という数値で表す。</p>
<pre><code class="hljs language-bash">$ go <span class="hljs-built_in">test</span> -cover
</code></pre>
<p>また、どこのテストが実施されていないかを知るためには、<code>cover</code> プロファイルというファイルを生成する必要がある。</p>
<pre><code class="hljs language-bash">$ go <span class="hljs-built_in">test</span> -coverprofile=cover.out
</code></pre>
<p>このままのファイルでは見にくいので、ブラウザ上で見られるように変換する。</p>
<pre><code class="hljs language-bash">$ go tool cover -html=cover.out -o cover.html
</code></pre>5:["$","article",null,{"style":{"maxWidth":"1000px","margin":"0 auto","padding":"0 2rem 2rem"},"children":[["$","h1",null,{"children":"Goのテストを勉強する"}],["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$10"}}]]}]
b:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
7:null
9:{"metadata":[["$","title","0",{"children":"MyDocs"}],["$","meta","1",{"name":"description","content":"A simple SSG blog built with Next.js"}]],"error":null,"digest":"$undefined"}
e:"$9:metadata"
