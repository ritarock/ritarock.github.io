1:"$Sreact.fragment"
2:I[9119,["119","static/chunks/119-2ee48d1f375d3fd9.js","974","static/chunks/app/page-ee49d1414c09869d.js"],""]
3:I[730,[],""]
4:I[2392,[],""]
6:I[3811,[],"OutletBoundary"]
8:I[4338,[],"AsyncMetadataOutlet"]
a:I[3811,[],"ViewportBoundary"]
c:I[3811,[],"MetadataBoundary"]
d:"$Sreact.suspense"
f:I[9426,[],""]
:HL["/_next/static/css/5e22d3fe14facb50.css","style"]
0:{"P":null,"b":"OVt0H6to9QSgb-YS8ef-u","p":"","c":["","docs","20180213090000"],"i":false,"f":[[["",{"children":["docs",{"children":[["slug","20180213090000","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/5e22d3fe14facb50.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"ja","children":["$","body",null,{"style":{"backgroundColor":"ghostwhite","margin":0,"minHeight":"100vh"},"children":[["$","header",null,{"style":{"padding":"1rem 0","marginBottom":"0.25rem"},"children":["$","div",null,{"style":{"maxWidth":"1000px","margin":"0 auto","padding":"0 2rem"},"children":["$","$L2",null,{"href":"/","style":{"fontSize":"1.5rem","fontWeight":"bold","textDecoration":"none","color":"#333"},"children":"MyDocs"}]}]}],["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]]}]}]]}],{"children":["docs",["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["slug","20180213090000","d"],["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L5",null,["$","$L6",null,{"children":["$L7",["$","$L8",null,{"promise":"$@9"}]]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,[["$","$La",null,{"children":"$Lb"}],null],["$","$Lc",null,{"children":["$","div",null,{"hidden":true,"children":["$","$d",null,{"fallback":null,"children":"$Le"}]}]}]]}],false]],"m":"$undefined","G":["$f",[]],"s":false,"S":true}
10:Tc5a,<h2>開発環境</h2>
<ul>
<li>Ubuntu/trusty64</li>
</ul>
<h2>Docker のインストール</h2>
<pre><code class="hljs language-bash">$ <span class="hljs-built_in">sudo</span> apt-get update
$ <span class="hljs-built_in">sudo</span> apt-get -y install \
    apt-transport-https \
    ca-certificates \
    curl \
    software-properties-common
$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | <span class="hljs-built_in">sudo</span> apt-key add -
$ <span class="hljs-built_in">sudo</span> apt-key fingerprint 0EBFCD88
$ <span class="hljs-built_in">sudo</span> add-apt-repository -y  \
   <span class="hljs-string">"deb [arch=amd64] https://download.docker.com/linux/ubuntu \
   <span class="hljs-subst">$(lsb_release -cs)</span> \
   stable"</span>
$ <span class="hljs-built_in">sudo</span> apt-get update
$ <span class="hljs-built_in">sudo</span> apt-get install -y docker-ce
</code></pre>
<h2>Docker コマンド</h2>
<h3>ローカルに保存された docker イメージの一覧を取得</h3>
<pre><code class="hljs language-bash">$ docker images
</code></pre>
<h3>docker hub にあるイメージを検索</h3>
<pre><code class="hljs language-bash">$ docker search &#x3C;イメージ>
</code></pre>
<h3>docker hub にあるイメージをローカルに取得する</h3>
<pre><code class="hljs language-bash">$ docker pull &#x3C;イメージ>
</code></pre>
<h3>コンテナでプロセスを起動する</h3>
<pre><code class="hljs language-bash">$ docker run -it &#x3C;イメージ> /bin/bash
</code></pre>
<h3>プロセスを確認する ( 停止されたものも含む )</h3>
<pre><code class="hljs language-bash">$ docker ps -a
</code></pre>
<h3>停止されたコンテナの削除</h3>
<pre><code class="hljs language-bash">$ docker <span class="hljs-built_in">rm</span> &#x3C;コンテナ<span class="hljs-built_in">id</span>>
</code></pre>
<p>id は一意なので頭の 4 桁程度入力すれば OK。</p>
<h3>コンテナを全て削除</h3>
<pre><code class="hljs language-bash">$ docker <span class="hljs-built_in">rm</span> $(docker ps -aq)
</code></pre>
<h3>exit と同時にコンテナの削除</h3>
<pre><code class="hljs language-bash">$ docker run --<span class="hljs-built_in">rm</span> -it &#x3C;イメージ> /bin/bash
</code></pre>
<h3>ポートをホスト側に公開して起動</h3>
<pre><code class="hljs language-bash">$ docker run -it -p 80:80 &#x3C;イメージ> /bin/bash
</code></pre>
<h3>外部ファイルを取り込む</h3>
<pre><code class="hljs language-bash">$ docker run -it -v &#x3C;ホスト側のパス>:&#x3C;コンテナ側のパス> &#x3C;イメージ> /bin/bash
</code></pre>
<h2>Dockerfile 作成してからの流れ</h2>
<h3>Dockerfile からイメージを作成</h3>
<pre><code class="hljs language-bash">$ docker build -t &#x3C;作成するイメージ名> .
</code></pre>
<h3>作成したイメージからコンテナを起動</h3>
<pre><code class="hljs language-bash">$ docker run --name &#x3C;起動するコンテナ名> -d -p &#x3C;イメージ名>
</code></pre>
<h3>コンテナの停止</h3>
<pre><code class="hljs language-bash">$ docker stop &#x3C;コンテナ名>
</code></pre>5:["$","article",null,{"style":{"maxWidth":"1000px","margin":"0 auto","padding":"0 2rem 2rem"},"children":[["$","h1",null,{"children":"Dockerのインストールからコンテナ作成まで"}],["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$10"}}]]}]
b:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
7:null
9:{"metadata":[["$","title","0",{"children":"MyDocs"}],["$","meta","1",{"name":"description","content":"A simple SSG blog built with Next.js"}]],"error":null,"digest":"$undefined"}
e:"$9:metadata"
