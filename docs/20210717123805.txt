1:"$Sreact.fragment"
2:I[9119,["119","static/chunks/119-2ee48d1f375d3fd9.js","974","static/chunks/app/page-ee49d1414c09869d.js"],""]
3:I[730,[],""]
4:I[2392,[],""]
6:I[3811,[],"OutletBoundary"]
8:I[4338,[],"AsyncMetadataOutlet"]
a:I[3811,[],"ViewportBoundary"]
c:I[3811,[],"MetadataBoundary"]
d:"$Sreact.suspense"
f:I[9426,[],""]
:HL["/_next/static/css/5e22d3fe14facb50.css","style"]
0:{"P":null,"b":"OVt0H6to9QSgb-YS8ef-u","p":"","c":["","docs","20210717123805"],"i":false,"f":[[["",{"children":["docs",{"children":[["slug","20210717123805","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/5e22d3fe14facb50.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"ja","children":["$","body",null,{"style":{"backgroundColor":"ghostwhite","margin":0,"minHeight":"100vh"},"children":[["$","header",null,{"style":{"padding":"1rem 0","marginBottom":"0.25rem"},"children":["$","div",null,{"style":{"maxWidth":"1000px","margin":"0 auto","padding":"0 2rem"},"children":["$","$L2",null,{"href":"/","style":{"fontSize":"1.5rem","fontWeight":"bold","textDecoration":"none","color":"#333"},"children":"MyDocs"}]}]}],["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]]}]}]]}],{"children":["docs",["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["slug","20210717123805","d"],["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L5",null,["$","$L6",null,{"children":["$L7",["$","$L8",null,{"promise":"$@9"}]]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,[["$","$La",null,{"children":"$Lb"}],null],["$","$Lc",null,{"children":["$","div",null,{"hidden":true,"children":["$","$d",null,{"fallback":null,"children":"$Le"}]}]}]]}],false]],"m":"$undefined","G":["$f",[]],"s":false,"S":true}
10:T14ab,<p>試したリポジトリはここ。</p>
<p><a href="https://github.com/ritarock/sandbox/tree/master/golang/sample_gorm">https://github.com/ritarock/sandbox/tree/master/golang/sample_gorm</a></p>
<h2>DB に接続</h2>
<p><code>gorm.Open(dialect string, args ...interface{})</code> の第一引数は接続するデータベース、第二引数には接続情報。</p>
<p>今回は Docker で実行したのでコンテナが起動しても mysql は起動していない場合があったので 30 秒待つ処理を入れた。</p>
<pre><code class="hljs language-go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">gormConnect</span><span class="hljs-params">()</span></span> *gorm.DB {
	DBMS := <span class="hljs-string">"mysql"</span>
	PROTOCOL := <span class="hljs-string">"tcp(db:3306)"</span>
	USER := <span class="hljs-string">"user"</span>
	PASS := <span class="hljs-string">"password"</span>
	DBNAME := <span class="hljs-string">"app"</span>
	CONNECT := USER + <span class="hljs-string">":"</span> + PASS + <span class="hljs-string">"@"</span> + PROTOCOL + <span class="hljs-string">"/"</span> + DBNAME + <span class="hljs-string">"?parseTime=true"</span>

	<span class="hljs-keyword">var</span> err <span class="hljs-type">error</span>
	db, err := gorm.Open(DBMS, CONNECT)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		fmt.Println(<span class="hljs-string">"Not ready"</span>)
		time.Sleep(time.Second)
		count++
		<span class="hljs-keyword">if</span> count > <span class="hljs-number">30</span> {
			<span class="hljs-built_in">panic</span>(err.Error())
		}
		<span class="hljs-keyword">return</span> gormConnect()
	}
	fmt.Println(<span class="hljs-string">"Success connect"</span>)
	<span class="hljs-keyword">return</span> db
}
</code></pre>
<h2>モデル</h2>
<p>構造体を定義する。</p>
<p>フィールドの <code>ID</code> は gorm では主キーとなる。 <code>CreatedAt</code> と <code>UpdatedAt</code> はレコードの作成時と更新時に自動的で設定される。</p>
<pre><code class="hljs language-go"><span class="hljs-keyword">type</span> Post <span class="hljs-keyword">struct</span> {
	ID        <span class="hljs-type">int</span>
	Content   <span class="hljs-type">string</span>
	Author    <span class="hljs-type">string</span> <span class="hljs-string">`sql:"not null"`</span>
	Comments  []Comment
	CreatedAt time.Time
}

<span class="hljs-keyword">type</span> Comment <span class="hljs-keyword">struct</span> {
	ID        <span class="hljs-type">int</span>
	Content   <span class="hljs-type">string</span>
	Author    <span class="hljs-type">string</span> <span class="hljs-string">`sql:"not null"`</span>
	PostId    <span class="hljs-type">int</span>
	CreatedAt time.Time
}
</code></pre>
<p>gorm ではフィールドタグ <code>gorm:""</code> を設定すること制約などの設定を行える。</p>
<p>設定できるものは <a href="https://gorm.io/ja_JP/docs/models.html#Fields-Tags">ここ</a> を参照。</p>
<h2>belongs to</h2>
<p>User は Company に所属している。</p>
<pre><code class="hljs language-go"><span class="hljs-keyword">type</span> User <span class="hljs-keyword">struct</span> {
  gorm.Model
  Name      <span class="hljs-type">string</span>
  CompanyID <span class="hljs-type">int</span>
  Company   Company
}

<span class="hljs-keyword">type</span> Company <span class="hljs-keyword">struct</span> {
  ID   <span class="hljs-type">int</span>
  Name <span class="hljs-type">string</span>
}
</code></pre>
<h2>has one</h2>
<p>別のモデルと 1 対 1 の関係。</p>
<pre><code class="hljs language-go"><span class="hljs-keyword">type</span> User <span class="hljs-keyword">struct</span> {
  gorm.Model
  CreditCard CreditCard
}

<span class="hljs-keyword">type</span> CreditCard <span class="hljs-keyword">struct</span> {
  gorm.Model
  Number <span class="hljs-type">string</span>
  UserID <span class="hljs-type">uint</span>
}
</code></pre>
<h2>has many</h2>
<p>User は CreditCard を複数持っている。</p>
<pre><code class="hljs language-go"><span class="hljs-keyword">type</span> User <span class="hljs-keyword">struct</span> {
  gorm.Model
  CreditCards []CreditCard
}

<span class="hljs-keyword">type</span> CreditCard <span class="hljs-keyword">struct</span> {
  gorm.Model
  Number <span class="hljs-type">string</span>
  UserID <span class="hljs-type">uint</span>
}
</code></pre>
<h2>many to many</h2>
<p>Book は複数の Author を持ち、 Author は複数の本を持っている。</p>
<pre><code class="hljs language-go"><span class="hljs-keyword">type</span> Book <span class="hljs-keyword">struct</span> {
  gorm.Model
  Authors []Author <span class="hljs-string">`gorm:"many2many:author_books"`</span>
}
<span class="hljs-keyword">type</span> Author <span class="hljs-keyword">struct</span> {
  gorm.Model
  Books []Book <span class="hljs-string">`gorm:"many2many:author_books"`</span>
}
</code></pre>
<h2>マイグレーション</h2>
<p>足りないカラムの追加、変更、インデックスの作成は行うが、不要になったカラムの削除等は行われない。</p>
<pre><code class="hljs language-go">db.AutoMigrate(&#x26;Post{}, &#x26;Comment{})
</code></pre>5:["$","article",null,{"style":{"maxWidth":"1000px","margin":"0 auto","padding":"0 2rem 2rem"},"children":[["$","h1",null,{"children":"GolangのORM試した"}],["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$10"}}]]}]
b:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
7:null
9:{"metadata":[["$","title","0",{"children":"MyDocs"}],["$","meta","1",{"name":"description","content":"A simple SSG blog built with Next.js"}]],"error":null,"digest":"$undefined"}
e:"$9:metadata"
