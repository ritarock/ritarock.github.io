1:"$Sreact.fragment"
2:I[9119,["119","static/chunks/119-2ee48d1f375d3fd9.js","974","static/chunks/app/page-ee49d1414c09869d.js"],""]
3:I[730,[],""]
4:I[2392,[],""]
6:I[3811,[],"OutletBoundary"]
8:I[4338,[],"AsyncMetadataOutlet"]
a:I[3811,[],"ViewportBoundary"]
c:I[3811,[],"MetadataBoundary"]
d:"$Sreact.suspense"
f:I[9426,[],""]
:HL["/_next/static/css/5e22d3fe14facb50.css","style"]
0:{"P":null,"b":"OVt0H6to9QSgb-YS8ef-u","p":"","c":["","docs","20201104134500"],"i":false,"f":[[["",{"children":["docs",{"children":[["slug","20201104134500","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/5e22d3fe14facb50.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"ja","children":["$","body",null,{"style":{"backgroundColor":"ghostwhite","margin":0,"minHeight":"100vh"},"children":[["$","header",null,{"style":{"padding":"1rem 0","marginBottom":"0.25rem"},"children":["$","div",null,{"style":{"maxWidth":"1000px","margin":"0 auto","padding":"0 2rem"},"children":["$","$L2",null,{"href":"/","style":{"fontSize":"1.5rem","fontWeight":"bold","textDecoration":"none","color":"#333"},"children":"MyDocs"}]}]}],["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]]}]}]]}],{"children":["docs",["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["slug","20201104134500","d"],["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L5",null,["$","$L6",null,{"children":["$L7",["$","$L8",null,{"promise":"$@9"}]]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,[["$","$La",null,{"children":"$Lb"}],null],["$","$Lc",null,{"children":["$","div",null,{"hidden":true,"children":["$","$d",null,{"fallback":null,"children":"$Le"}]}]}]]}],false]],"m":"$undefined","G":["$f",[]],"s":false,"S":true}
10:T20c6,<h2>some()</h2>
<p><code>some()</code> は配列内の要素 1 つでも条件に合致するものがあれば true を返し、 1 つも合致しなければ false を返す。</p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> dataList = [
  {<span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">user</span>: <span class="hljs-string">"user1"</span>},
  {<span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">user</span>: <span class="hljs-string">"user2"</span>},
  {<span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">user</span>: <span class="hljs-string">"user3"</span>},
]

<span class="hljs-keyword">const</span> includeId3 = dataList.<span class="hljs-title function_">some</span>(<span class="hljs-function"><span class="hljs-params">data</span> =></span> data.<span class="hljs-property">id</span> === <span class="hljs-number">3</span>)
<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(includeId3) <span class="hljs-comment">//true</span>
</code></pre>
<h2>ever()</h2>
<p><code>every()</code> は配列内の全ての要素が条件に合致するかを調べることができる。</p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> dataList = [
  {<span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">user</span>: <span class="hljs-string">"user1"</span>},
  {<span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">user</span>: <span class="hljs-string">"user2"</span>},
  {<span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">user</span>: <span class="hljs-string">"user3"</span>},
]

<span class="hljs-keyword">const</span> includeId3 = dataList.<span class="hljs-title function_">every</span>(<span class="hljs-function"><span class="hljs-params">data</span> =></span> data.<span class="hljs-property">id</span> === <span class="hljs-number">3</span>)
<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(includeId3) <span class="hljs-comment">//false</span>
</code></pre>
<h2>filter()</h2>
<p><code>filter()</code> は配列の要素から条件に合致する新しい配列を作成する。</p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> dataList = [
  { <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">user</span>: <span class="hljs-string">"usr1"</span>},
  { <span class="hljs-attr">id</span>: <span class="hljs-number">10</span>, <span class="hljs-attr">user</span>: <span class="hljs-string">"usr10"</span>},
  { <span class="hljs-attr">id</span>: <span class="hljs-number">20</span>, <span class="hljs-attr">user</span>: <span class="hljs-string">"usr20"</span>},
]

<span class="hljs-keyword">const</span> over10List = dataList.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">data</span> =></span> data.<span class="hljs-property">id</span> >= <span class="hljs-number">10</span>)

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(over10List)
<span class="hljs-comment">// [ { id: 10, user: 'usr10' }, { id: 20, user: 'usr20' } ]</span>
</code></pre>
<h2>map()</h2>
<p><code>map()</code> は処理して新しい配列を作成する。</p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> dataList = [
  { <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">user</span>: <span class="hljs-string">"usr1"</span>},
  { <span class="hljs-attr">id</span>: <span class="hljs-number">10</span>, <span class="hljs-attr">user</span>: <span class="hljs-string">"usr10"</span>},
  { <span class="hljs-attr">id</span>: <span class="hljs-number">20</span>, <span class="hljs-attr">user</span>: <span class="hljs-string">"usr20"</span>},
]

<span class="hljs-keyword">const</span> over10List = dataList
                    .<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">data</span> =></span> data.<span class="hljs-property">id</span> >= <span class="hljs-number">10</span>)
                    .<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">data</span> =></span> data.<span class="hljs-property">user</span>)

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(over10List)
<span class="hljs-comment">// [ 'usr10', 'usr20' ]</span>
</code></pre>
<h2>flatMap()</h2>
<p><code>flatMap()</code> は配列の階層を解除し、別の配列に置き換える。</p>
<p><code>flatMap()</code> は <code>map()</code> の処理の後に <code>flat()</code> を実行する。</p>
<p><code>flat()</code> は配列を 1 次元にするメソッド。</p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> dataList = [
  {
    <span class="hljs-attr">user</span>: <span class="hljs-string">"user1"</span>,
    <span class="hljs-attr">tags</span>: [<span class="hljs-string">"aaa"</span>, <span class="hljs-string">"bbb"</span>]
  },
  {
    <span class="hljs-attr">user</span>: <span class="hljs-string">"user2"</span>,
    <span class="hljs-attr">tags</span>: [<span class="hljs-string">"ccc"</span>]
  },
  {
    <span class="hljs-attr">user</span>: <span class="hljs-string">"user3"</span>,
    <span class="hljs-attr">tags</span>: [<span class="hljs-string">"ddd"</span>]
  },
]

<span class="hljs-keyword">const</span> tagList = dataList.<span class="hljs-title function_">flatMap</span>(<span class="hljs-function"><span class="hljs-params">data</span> =></span> data.<span class="hljs-property">tags</span>)

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(tagList)
<span class="hljs-comment">// [ 'aaa', 'bbb', 'ccc', 'ddd' ]</span>


<span class="hljs-keyword">const</span> tagList2 = dataList.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">data</span> =></span> data.<span class="hljs-property">tags</span>)

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(tagList2.<span class="hljs-title function_">flat</span>())
<span class="hljs-comment">// [ 'aaa', 'bbb', 'ccc', 'ddd' ]</span>
</code></pre>
<h2>Object.entries()</h2>
<p><code>Object.entries( 対象のオブジェクト )</code> を実行すると <code>[[key1, value1], [key2, value2]]</code> が返る。</p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> obj = {
  <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,
  <span class="hljs-attr">user</span>: <span class="hljs-string">"user1"</span>,
  <span class="hljs-attr">name</span>: <span class="hljs-string">"name1"</span>
}

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">entries</span>(obj))
<span class="hljs-comment">// [ [ 'id', 1 ], [ 'user', 'user1' ], [ 'name', 'name1' ] ]</span>

<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">entries</span>(obj)
        .<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">[key, value]</span>) =></span> {
          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Key: <span class="hljs-subst">${key}</span>`</span>)
          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Value: <span class="hljs-subst">${value}</span>`</span>)
        })
<span class="hljs-comment">// Key: id</span>
<span class="hljs-comment">// Value: 1</span>
<span class="hljs-comment">// Key: user</span>
<span class="hljs-comment">// Value: user1</span>
<span class="hljs-comment">// Key: name</span>
<span class="hljs-comment">// Value: name1</span>
</code></pre>5:["$","article",null,{"style":{"maxWidth":"1000px","margin":"0 auto","padding":"0 2rem 2rem"},"children":[["$","h1",null,{"children":"some/every/filter/map/flatMap/Object.entriesとか"}],["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$10"}}]]}]
b:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
7:null
9:{"metadata":[["$","title","0",{"children":"MyDocs"}],["$","meta","1",{"name":"description","content":"A simple SSG blog built with Next.js"}]],"error":null,"digest":"$undefined"}
e:"$9:metadata"
