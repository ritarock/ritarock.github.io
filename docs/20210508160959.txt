1:"$Sreact.fragment"
2:I[9119,["119","static/chunks/119-2ee48d1f375d3fd9.js","974","static/chunks/app/page-ee49d1414c09869d.js"],""]
3:I[730,[],""]
4:I[2392,[],""]
6:I[3811,[],"OutletBoundary"]
8:I[4338,[],"AsyncMetadataOutlet"]
a:I[3811,[],"ViewportBoundary"]
c:I[3811,[],"MetadataBoundary"]
d:"$Sreact.suspense"
f:I[9426,[],""]
:HL["/_next/static/css/5e22d3fe14facb50.css","style"]
0:{"P":null,"b":"OVt0H6to9QSgb-YS8ef-u","p":"","c":["","docs","20210508160959"],"i":false,"f":[[["",{"children":["docs",{"children":[["slug","20210508160959","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/5e22d3fe14facb50.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"ja","children":["$","body",null,{"style":{"backgroundColor":"ghostwhite","margin":0,"minHeight":"100vh"},"children":[["$","header",null,{"style":{"padding":"1rem 0","marginBottom":"0.25rem"},"children":["$","div",null,{"style":{"maxWidth":"1000px","margin":"0 auto","padding":"0 2rem"},"children":["$","$L2",null,{"href":"/","style":{"fontSize":"1.5rem","fontWeight":"bold","textDecoration":"none","color":"#333"},"children":"MyDocs"}]}]}],["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]]}]}]]}],{"children":["docs",["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["slug","20210508160959","d"],["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L5",null,["$","$L6",null,{"children":["$L7",["$","$L8",null,{"promise":"$@9"}]]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,[["$","$La",null,{"children":"$Lb"}],null],["$","$Lc",null,{"children":["$","div",null,{"hidden":true,"children":["$","$d",null,{"fallback":null,"children":"$Le"}]}]}]]}],false]],"m":"$undefined","G":["$f",[]],"s":false,"S":true}
10:T2e11,<h2>何も使わずに実装する</h2>
<h3>和集合</h3>
<pre><code class="hljs language-go"><span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> <span class="hljs-string">"fmt"</span>

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {
	a := []<span class="hljs-type">int</span>{<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>}
	b := []<span class="hljs-type">int</span>{<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>}
	c := []<span class="hljs-type">int</span>{<span class="hljs-number">3</span>}

	result := <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(array ...[]<span class="hljs-type">int</span>)</span></span> []<span class="hljs-type">int</span> {
		m := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>]<span class="hljs-keyword">struct</span>{})
		<span class="hljs-keyword">for</span> _, arr := <span class="hljs-keyword">range</span> array {
			<span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> arr {
				m[v] = <span class="hljs-keyword">struct</span>{}{}
			}
		}
		tmp := []<span class="hljs-type">int</span>{}
		<span class="hljs-keyword">for</span> k := <span class="hljs-keyword">range</span> m {
			tmp = <span class="hljs-built_in">append</span>(tmp, k)
		}
		<span class="hljs-keyword">return</span> tmp
	}(a, b, c)

	fmt.Println(result)
}

<span class="hljs-comment">// [3 4 1 2]</span>
</code></pre>
<h2>積集合</h2>
<pre><code class="hljs language-go"><span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> <span class="hljs-string">"fmt"</span>

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {
	a := []<span class="hljs-type">int</span>{<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>}
	b := []<span class="hljs-type">int</span>{<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>}
	c := []<span class="hljs-type">int</span>{<span class="hljs-number">3</span>}

	result := <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(array ...[]<span class="hljs-type">int</span>)</span></span> []<span class="hljs-type">int</span> {
		m := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>]<span class="hljs-keyword">struct</span>{})
		tmp1 := []<span class="hljs-type">int</span>{}
		tmp2 := []<span class="hljs-type">int</span>{}
		<span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> array[<span class="hljs-number">0</span>] {
			m[v] = <span class="hljs-keyword">struct</span>{}{}
		}
		<span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> array[<span class="hljs-number">1</span>] {
			<span class="hljs-keyword">if</span> _, ok := m[v]; !ok {
				<span class="hljs-keyword">continue</span>
			}
			tmp1 = <span class="hljs-built_in">append</span>(tmp1, v)
		}

		<span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &#x3C; <span class="hljs-built_in">len</span>(array)<span class="hljs-number">-2</span>; i++ {
			<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(arr1, arr2 []<span class="hljs-type">int</span>)</span></span> {
				m := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>]<span class="hljs-keyword">struct</span>{})
				<span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> arr1 {
					m[v] = <span class="hljs-keyword">struct</span>{}{}
				}
				<span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> arr2 {
					<span class="hljs-keyword">if</span> _, ok := m[v]; !ok {
						<span class="hljs-keyword">continue</span>
					}
					tmp2 = <span class="hljs-built_in">append</span>(tmp2, v)
				}
			}(tmp1, array[i+<span class="hljs-number">2</span>])
		}
		<span class="hljs-keyword">return</span> tmp2
	}(a, b, c)

	uniqueResult := <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(arr []<span class="hljs-type">int</span>)</span></span> []<span class="hljs-type">int</span> {
		m := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>]<span class="hljs-keyword">struct</span>{})
		tmp := <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, <span class="hljs-number">0</span>)
		<span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> arr {
			<span class="hljs-keyword">if</span> _, ok := m[v]; !ok {
				m[v] = <span class="hljs-keyword">struct</span>{}{}
				tmp = <span class="hljs-built_in">append</span>(tmp, v)
			}
		}
		<span class="hljs-keyword">return</span> tmp
	}(result)

	fmt.Println(uniqueResult)
}

<span class="hljs-comment">// [3]</span>
</code></pre>
<h2>差集合を実装してみる</h2>
<pre><code class="hljs language-go"><span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> <span class="hljs-string">"fmt"</span>

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {
	a := []<span class="hljs-type">int</span>{<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>}
	b := []<span class="hljs-type">int</span>{<span class="hljs-number">2</span>, <span class="hljs-number">3</span>}

	result := <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(arr1, arr2 []<span class="hljs-type">int</span>)</span></span> []<span class="hljs-type">int</span> {
		m := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>]<span class="hljs-keyword">struct</span>{})
		<span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> arr2 {
			m[v] = <span class="hljs-keyword">struct</span>{}{}
		}

		tmp := []<span class="hljs-type">int</span>{}
		<span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> arr1 {
			<span class="hljs-keyword">if</span> _, ok := m[v]; ok {
				<span class="hljs-keyword">continue</span>
			}
			tmp = <span class="hljs-built_in">append</span>(tmp, v)
		}
		<span class="hljs-keyword">return</span> tmp
	}(a, b)

	fmt.Println(result)
}

<span class="hljs-comment">// [1]</span>
</code></pre>
<h2>github.com/golang-collections/collections を使って実装する</h2>
<h3>和集合</h3>
<pre><code class="hljs language-go"><span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> (
	<span class="hljs-string">"fmt"</span>

	<span class="hljs-string">"github.com/golang-collections/collections/set"</span>
)

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {
	a := []<span class="hljs-type">int</span>{<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>}
	b := []<span class="hljs-type">int</span>{<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>}
	c := []<span class="hljs-type">int</span>{<span class="hljs-number">3</span>}
	aSet := set.New()
	bSet := set.New()
	cSet := set.New()

	<span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> a {
		aSet.Insert(v)
	}
	<span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> b {
		bSet.Insert(v)
	}
	<span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> c {
		cSet.Insert(v)
	}

	result := aSet.Union(bSet).Union(cSet)
	resultArr := []<span class="hljs-type">int</span>{}
	result.Do(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(i <span class="hljs-keyword">interface</span>{})</span></span> { resultArr = <span class="hljs-built_in">append</span>(resultArr, i.(<span class="hljs-type">int</span>)) })
	fmt.Println(resultArr)
}

<span class="hljs-comment">// [1 2 3 4]</span>
</code></pre>
<h2>積集合</h2>
<pre><code class="hljs language-go"><span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> (
	<span class="hljs-string">"fmt"</span>

	<span class="hljs-string">"github.com/golang-collections/collections/set"</span>
)

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {
	a := []<span class="hljs-type">int</span>{<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>}
	b := []<span class="hljs-type">int</span>{<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>}
	c := []<span class="hljs-type">int</span>{<span class="hljs-number">3</span>}
	aSet := set.New()
	bSet := set.New()
	cSet := set.New()

	<span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> a {
		aSet.Insert(v)
	}
	<span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> b {
		bSet.Insert(v)
	}
	<span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> c {
		cSet.Insert(v)
	}

	result := aSet.Intersection(bSet).Intersection(cSet)
	resultArr := []<span class="hljs-type">int</span>{}
	result.Do(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(i <span class="hljs-keyword">interface</span>{})</span></span> { resultArr = <span class="hljs-built_in">append</span>(resultArr, i.(<span class="hljs-type">int</span>)) })
	fmt.Println(resultArr)
}

<span class="hljs-comment">// [3]</span>
</code></pre>
<h2>差集合を実装してみる</h2>
<pre><code class="hljs language-go"><span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> (
	<span class="hljs-string">"fmt"</span>

	<span class="hljs-string">"github.com/golang-collections/collections/set"</span>
)

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {
	a := []<span class="hljs-type">int</span>{<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>}
	b := []<span class="hljs-type">int</span>{<span class="hljs-number">2</span>, <span class="hljs-number">3</span>}
	aSet := set.New()
	bSet := set.New()

	<span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> a {
		aSet.Insert(v)
	}
	<span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> b {
		bSet.Insert(v)
	}

	result := aSet.Difference(bSet)
	resultArr := []<span class="hljs-type">int</span>{}
	result.Do(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(i <span class="hljs-keyword">interface</span>{})</span></span> { resultArr = <span class="hljs-built_in">append</span>(resultArr, i.(<span class="hljs-type">int</span>)) })

	fmt.Println(resultArr)
}

<span class="hljs-comment">// [1]</span>
</code></pre>5:["$","article",null,{"style":{"maxWidth":"1000px","margin":"0 auto","padding":"0 2rem 2rem"},"children":[["$","h1",null,{"children":"Golangで集合の演算"}],["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$10"}}]]}]
b:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
7:null
9:{"metadata":[["$","title","0",{"children":"MyDocs"}],["$","meta","1",{"name":"description","content":"A simple SSG blog built with Next.js"}]],"error":null,"digest":"$undefined"}
e:"$9:metadata"
