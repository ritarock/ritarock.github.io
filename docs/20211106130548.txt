1:"$Sreact.fragment"
2:I[9119,["119","static/chunks/119-2ee48d1f375d3fd9.js","974","static/chunks/app/page-ee49d1414c09869d.js"],""]
3:I[730,[],""]
4:I[2392,[],""]
6:I[3811,[],"OutletBoundary"]
8:I[4338,[],"AsyncMetadataOutlet"]
a:I[3811,[],"ViewportBoundary"]
c:I[3811,[],"MetadataBoundary"]
d:"$Sreact.suspense"
f:I[9426,[],""]
:HL["/_next/static/css/5e22d3fe14facb50.css","style"]
0:{"P":null,"b":"OVt0H6to9QSgb-YS8ef-u","p":"","c":["","docs","20211106130548"],"i":false,"f":[[["",{"children":["docs",{"children":[["slug","20211106130548","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/5e22d3fe14facb50.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"ja","children":["$","body",null,{"style":{"backgroundColor":"ghostwhite","margin":0,"minHeight":"100vh"},"children":[["$","header",null,{"style":{"padding":"1rem 0","marginBottom":"0.25rem"},"children":["$","div",null,{"style":{"maxWidth":"1000px","margin":"0 auto","padding":"0 2rem"},"children":["$","$L2",null,{"href":"/","style":{"fontSize":"1.5rem","fontWeight":"bold","textDecoration":"none","color":"#333"},"children":"MyDocs"}]}]}],["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]]}]}]]}],{"children":["docs",["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["slug","20211106130548","d"],["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L5",null,["$","$L6",null,{"children":["$L7",["$","$L8",null,{"promise":"$@9"}]]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,[["$","$La",null,{"children":"$Lb"}],null],["$","$Lc",null,{"children":["$","div",null,{"hidden":true,"children":["$","$d",null,{"fallback":null,"children":"$Le"}]}]}]]}],false]],"m":"$undefined","G":["$f",[]],"s":false,"S":true}
10:T2148,<p>最小構成。</p>
<pre><code class="hljs language-bash">$ go get github.com/labstack/echo/v4
</code></pre>
<pre><code class="hljs language-go"><span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> (
	<span class="hljs-string">"net/http"</span>

	<span class="hljs-string">"github.com/labstack/echo/v4"</span>
)

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {
	e := echo.New()
	e.GET(<span class="hljs-string">"/"</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c echo.Context)</span></span> <span class="hljs-type">error</span> {
		<span class="hljs-keyword">return</span> c.String(http.StatusOK, <span class="hljs-string">"Hello World!"</span>)
	})
	e.Logger.Fatal(e.Start(<span class="hljs-string">":8080"</span>))
}
</code></pre>
<h2>path parameters</h2>
<p><code>http://localhost:8080/users/1</code></p>
<p><code>1</code> が返ってくる。</p>
<pre><code class="hljs language-go"><span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> (
	<span class="hljs-string">"net/http"</span>

	<span class="hljs-string">"github.com/labstack/echo/v4"</span>
)

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {
	e := echo.New()
	e.GET(<span class="hljs-string">"/users/:id"</span>, getUser)
	e.Logger.Fatal(e.Start(<span class="hljs-string">":8080"</span>))
}

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">getUser</span><span class="hljs-params">(c echo.Context)</span></span> <span class="hljs-type">error</span> {
	id := c.Param(<span class="hljs-string">"id"</span>)
	<span class="hljs-keyword">return</span> c.String(http.StatusOK, id)
}
</code></pre>
<h2>query parameters</h2>
<p><code>http://localhost:8080/show?team=x-men&#x26;member=wolverine</code></p>
<p><code>team: x-men, member: wolverine</code> が返ってくる。</p>
<pre><code class="hljs language-go"><span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> (
	<span class="hljs-string">"net/http"</span>

	<span class="hljs-string">"github.com/labstack/echo/v4"</span>
)

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {
	e := echo.New()
	e.GET(<span class="hljs-string">"/show"</span>, show)
	e.Logger.Fatal(e.Start(<span class="hljs-string">":8080"</span>))
}

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">show</span><span class="hljs-params">(c echo.Context)</span></span> <span class="hljs-type">error</span> {
	team := c.QueryParam(<span class="hljs-string">"team"</span>)
	member := c.QueryParam(<span class="hljs-string">"member"</span>)
	<span class="hljs-keyword">return</span> c.String(http.StatusOK, <span class="hljs-string">"team: "</span>+team+<span class="hljs-string">", member: "</span>+member)
}
</code></pre>
<h2>json を返す</h2>
<p><code>http://localhost:8080/json</code></p>
<p>json を返す。</p>
<pre><code class="hljs language-json"><span class="hljs-punctuation">{</span>
  <span class="hljs-attr">"name"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"Jon"</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">"email"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"json@sample.com"</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<pre><code class="hljs language-go"><span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> (
	<span class="hljs-string">"net/http"</span>

	<span class="hljs-string">"github.com/labstack/echo/v4"</span>
)

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {
	e := echo.New()
	e.GET(<span class="hljs-string">"/json"</span>, json)
	e.Logger.Fatal(e.Start(<span class="hljs-string">":8080"</span>))
}

<span class="hljs-keyword">type</span> User <span class="hljs-keyword">struct</span> {
	Name  <span class="hljs-type">string</span> <span class="hljs-string">`json:"name"`</span>
	Email <span class="hljs-type">string</span> <span class="hljs-string">`json:"email"`</span>
}

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">json</span><span class="hljs-params">(c echo.Context)</span></span> <span class="hljs-type">error</span> {
	user := &#x26;User{
		Name:  <span class="hljs-string">"Jon"</span>,
		Email: <span class="hljs-string">"json@sample.com"</span>,
	}
	<span class="hljs-keyword">return</span> c.JSON(http.StatusOK, user)
}
</code></pre>
<p><code>context.JSON</code> は内部では <code>json.Marshal</code> を使っている。
大きな JSON では非効率なので、その場合は直接 JSON をストリームできる。</p>
<pre><code class="hljs language-go"><span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> (
	<span class="hljs-string">"encoding/json"</span>
	<span class="hljs-string">"net/http"</span>

	<span class="hljs-string">"github.com/labstack/echo/v4"</span>
)

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {
	e := echo.New()
	e.GET(<span class="hljs-string">"/jsonStream"</span>, jsonStream)
	e.Logger.Fatal(e.Start(<span class="hljs-string">":8080"</span>))
}

<span class="hljs-keyword">type</span> User <span class="hljs-keyword">struct</span> {
	Name  <span class="hljs-type">string</span> <span class="hljs-string">`json:"name"`</span>
	Email <span class="hljs-type">string</span> <span class="hljs-string">`json:"email"`</span>
}

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">jsonStream</span><span class="hljs-params">(c echo.Context)</span></span> <span class="hljs-type">error</span> {
	user := &#x26;User{
		Name:  <span class="hljs-string">"Jon"</span>,
		Email: <span class="hljs-string">"json@sample.com"</span>,
	}
	c.Response().Header().Set(echo.HeaderContentType, echo.MIMEApplicationJSONCharsetUTF8)
	c.Response().WriteHeader(http.StatusOK)
	<span class="hljs-keyword">return</span> json.NewEncoder(c.Response()).Encode(user)
}
</code></pre>
<h2>Bind</h2>
<p><code>Context.Bind</code> を使って、ソースからデータ構造にバインドさせる。</p>
<pre><code class="hljs language-bash">$ curl -X POST http://localhost:8080/users \
       -H <span class="hljs-string">'Content-Type: application/json'</span> \
       -d <span class="hljs-string">'{"name":"Jon","email":"json@sample.com"}'</span>
{
  <span class="hljs-string">"name"</span>:<span class="hljs-string">"Jon"</span>,
  <span class="hljs-string">"email"</span>:<span class="hljs-string">"json@sample.com"</span>
}
</code></pre>
<pre><code class="hljs language-go"><span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> (
	<span class="hljs-string">"fmt"</span>
	<span class="hljs-string">"net/http"</span>

	<span class="hljs-string">"github.com/labstack/echo/v4"</span>
)

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {
	e := echo.New()
	e.POST(<span class="hljs-string">"/users"</span>, create)
	e.Logger.Fatal(e.Start(<span class="hljs-string">":8080"</span>))
}

<span class="hljs-keyword">type</span> User <span class="hljs-keyword">struct</span> {
	Name  <span class="hljs-type">string</span> <span class="hljs-string">`json:"name"`</span>
	Email <span class="hljs-type">string</span> <span class="hljs-string">`json:"email"`</span>
}

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">create</span><span class="hljs-params">(c echo.Context)</span></span> <span class="hljs-type">error</span> {
	user := <span class="hljs-built_in">new</span>(User)
	<span class="hljs-keyword">if</span> err := c.Bind(user); err != <span class="hljs-literal">nil</span> {
		<span class="hljs-keyword">return</span> err
	}
	fmt.Println(user)

	bindUser := &#x26;User{
		Name:  user.Name,
		Email: user.Email,
	}

	<span class="hljs-keyword">return</span> c.JSON(http.StatusOK, bindUser)
}
</code></pre>5:["$","article",null,{"style":{"maxWidth":"1000px","margin":"0 auto","padding":"0 2rem 2rem"},"children":[["$","h1",null,{"children":"echoを触ってみる"}],["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$10"}}]]}]
b:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
7:null
9:{"metadata":[["$","title","0",{"children":"MyDocs"}],["$","meta","1",{"name":"description","content":"A simple SSG blog built with Next.js"}]],"error":null,"digest":"$undefined"}
e:"$9:metadata"
