1:"$Sreact.fragment"
2:I[9119,["119","static/chunks/119-2ee48d1f375d3fd9.js","974","static/chunks/app/page-ee49d1414c09869d.js"],""]
3:I[730,[],""]
4:I[2392,[],""]
6:I[3811,[],"OutletBoundary"]
8:I[4338,[],"AsyncMetadataOutlet"]
a:I[3811,[],"ViewportBoundary"]
c:I[3811,[],"MetadataBoundary"]
d:"$Sreact.suspense"
f:I[9426,[],""]
:HL["/_next/static/css/5e22d3fe14facb50.css","style"]
0:{"P":null,"b":"nvFx_FV4eLnf8EmFzYlmi","p":"","c":["","docs","20200505151108"],"i":false,"f":[[["",{"children":["docs",{"children":[["slug","20200505151108","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/5e22d3fe14facb50.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"ja","children":["$","body",null,{"style":{"backgroundColor":"ghostwhite","margin":0,"minHeight":"100vh"},"children":[["$","header",null,{"style":{"padding":"1rem 0","marginBottom":"0.25rem"},"children":["$","div",null,{"style":{"maxWidth":"1000px","margin":"0 auto","padding":"0 2rem"},"children":["$","$L2",null,{"href":"/","style":{"fontSize":"1.5rem","fontWeight":"bold","textDecoration":"none","color":"#333"},"children":"MyDocs"}]}]}],["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]]}]}]]}],{"children":["docs",["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["slug","20200505151108","d"],["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L5",null,["$","$L6",null,{"children":["$L7",["$","$L8",null,{"promise":"$@9"}]]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,[["$","$La",null,{"children":"$Lb"}],null],["$","$Lc",null,{"children":["$","div",null,{"hidden":true,"children":["$","$d",null,{"fallback":null,"children":"$Le"}]}]}]]}],false]],"m":"$undefined","G":["$f",[]],"s":false,"S":true}
10:T8992,<h2>1問目 <a href="https://atcoder.jp/contests/abc086/tasks/abc086_a">ABC 086 A - Product</a></h2>
<pre><code class="hljs language-go"><span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> <span class="hljs-string">"fmt"</span>

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {
	<span class="hljs-keyword">var</span> a, b <span class="hljs-type">int</span>
	fmt.Scan(&#x26;a, &#x26;b)

	<span class="hljs-keyword">if</span> (a*b)%<span class="hljs-number">2</span> == <span class="hljs-number">0</span> {
		fmt.Println(<span class="hljs-string">"Even"</span>)
	} <span class="hljs-keyword">else</span> {
		fmt.Println(<span class="hljs-string">"Odd"</span>)
	}
}
</code></pre>
<h2>2問目 <a href="https://atcoder.jp/contests/abc081/tasks/abc081_a">ABC 081 A - Placing Marbles</a></h2>
<pre><code class="hljs language-go"><span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> (
	<span class="hljs-string">"fmt"</span>
	<span class="hljs-string">"strings"</span>
)

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {
	<span class="hljs-keyword">var</span> s <span class="hljs-type">string</span>
	<span class="hljs-keyword">var</span> count <span class="hljs-type">int</span>
	fmt.Scan(&#x26;s)

	splitWord := strings.Split(s, <span class="hljs-string">""</span>)

	<span class="hljs-keyword">for</span> _, w := <span class="hljs-keyword">range</span> splitWord {
		<span class="hljs-keyword">if</span> w == <span class="hljs-string">"1"</span> {
			count++
		}
	}
	fmt.Println(count)
}
</code></pre>
<h2>3問目 <a href="https://atcoder.jp/contests/abc081/tasks/abc081_b">ABC 081 B - Shift Only</a></h2>
<pre><code class="hljs language-go"><span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> <span class="hljs-string">"fmt"</span>

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">scanNums</span><span class="hljs-params">(<span class="hljs-built_in">len</span> <span class="hljs-type">int</span>)</span></span> []<span class="hljs-type">int</span> {
	<span class="hljs-keyword">var</span> num <span class="hljs-type">int</span>
	<span class="hljs-keyword">var</span> nums []<span class="hljs-type">int</span>
	<span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &#x3C; <span class="hljs-built_in">len</span>; i++ {
		fmt.Scan(&#x26;num)
		nums = <span class="hljs-built_in">append</span>(nums, num)
	}

	<span class="hljs-keyword">return</span> nums
}

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {
	<span class="hljs-keyword">var</span> N <span class="hljs-type">int</span>
	fmt.Scan(&#x26;N)

	nums := scanNums(N)

	flg := <span class="hljs-literal">true</span>
	count := <span class="hljs-number">0</span>

	<span class="hljs-keyword">for</span> flg {
		<span class="hljs-keyword">for</span> i, s := <span class="hljs-keyword">range</span> nums {
			<span class="hljs-keyword">if</span> s%<span class="hljs-number">2</span> != <span class="hljs-number">0</span> {
				flg = <span class="hljs-literal">false</span>
			}
			nums[i] = s / <span class="hljs-number">2</span>
		}
		count++
	}
	fmt.Println(count - <span class="hljs-number">1</span>)
}
</code></pre>
<h2>4問目 <a href="https://atcoder.jp/contests/abc087/tasks/abc087_b">ABC 087 B - Coins</a></h2>
<pre><code class="hljs language-go"><span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> <span class="hljs-string">"fmt"</span>

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {
	<span class="hljs-keyword">var</span> A, B, C, X <span class="hljs-type">int</span>
	a, b, c := <span class="hljs-number">500</span>, <span class="hljs-number">100</span>, <span class="hljs-number">50</span>
	count := <span class="hljs-number">0</span>
	fmt.Scan(&#x26;A, &#x26;B, &#x26;C, &#x26;X)

	<span class="hljs-keyword">for</span> _c := <span class="hljs-number">0</span>; _c &#x3C;= C; _c++ {
		<span class="hljs-keyword">for</span> _b := <span class="hljs-number">0</span>; _b &#x3C;= B; _b++ {
			<span class="hljs-keyword">for</span> _a := <span class="hljs-number">0</span>; _a &#x3C;= A; _a++ {
				<span class="hljs-keyword">if</span> X == a*_a+b*_b+c*_c {
					count++
				}
			}
		}
	}
	fmt.Println(count)
}
</code></pre>
<h2>5問目 <a href="https://atcoder.jp/contests/abc083/tasks/abc083_b">ABC 083 B - Some Sums</a></h2>
<pre><code class="hljs language-go"><span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> <span class="hljs-string">"fmt"</span>

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sumDigists</span><span class="hljs-params">(n <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> {
	sum := <span class="hljs-number">0</span>
	<span class="hljs-keyword">if</span> n &#x3C; <span class="hljs-number">10</span> {
		<span class="hljs-keyword">return</span> n
	} <span class="hljs-keyword">else</span> {
		<span class="hljs-keyword">for</span> n > <span class="hljs-number">0</span> {
			sum += n % <span class="hljs-number">10</span>
			n /= <span class="hljs-number">10</span>
		}
	}
	<span class="hljs-keyword">return</span> sum
}

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {
	<span class="hljs-keyword">var</span> N, A, B <span class="hljs-type">int</span>
	fmt.Scan(&#x26;N, &#x26;A, &#x26;B)
	<span class="hljs-keyword">var</span> result <span class="hljs-type">int</span>
	<span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &#x3C;= N; i++ {
		<span class="hljs-keyword">if</span> A &#x3C;= sumDigists(i) &#x26;&#x26; sumDigists(i) &#x3C;= B {
			result += i
		}
	}

	fmt.Println(result)
}
</code></pre>
<h2>6問目 <a href="https://atcoder.jp/contests/abc088/tasks/abc088_b">ABC 088 B - Card Game for Two</a></h2>
<p>降順のソートはこんな感じで行う。</p>
<pre><code class="hljs language-go">sort.Sort(sort.Reverse(sort.IntSlice(arr)))
</code></pre>
<pre><code class="hljs language-go"><span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> (
	<span class="hljs-string">"fmt"</span>
	<span class="hljs-string">"sort"</span>
)

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">scanNums</span><span class="hljs-params">(<span class="hljs-built_in">len</span> <span class="hljs-type">int</span>)</span></span> []<span class="hljs-type">int</span> {
	<span class="hljs-keyword">var</span> num <span class="hljs-type">int</span>
	<span class="hljs-keyword">var</span> nums []<span class="hljs-type">int</span>
	<span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &#x3C; <span class="hljs-built_in">len</span>; i++ {
		fmt.Scan(&#x26;num)
		nums = <span class="hljs-built_in">append</span>(nums, num)
	}
	<span class="hljs-keyword">return</span> nums
}

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {
	<span class="hljs-keyword">var</span> N <span class="hljs-type">int</span>
	<span class="hljs-keyword">var</span> result <span class="hljs-type">int</span>
	fmt.Scan(&#x26;N)
	arr := scanNums(N)
	sort.Sort(sort.Reverse(sort.IntSlice(arr)))

	<span class="hljs-keyword">for</span> i, v := <span class="hljs-keyword">range</span> arr {
		<span class="hljs-keyword">if</span> i%<span class="hljs-number">2</span> == <span class="hljs-number">0</span> {
			result += v
		} <span class="hljs-keyword">else</span> {
			result -= v
		}
	}

	fmt.Println(result)
}
</code></pre>
<h2>7問目 <a href="https://atcoder.jp/contests/abc085/tasks/abc085_b">ABC 085 B - Kagami Mochi</a></h2>
<p>配列をユニークな配列にする関数を用意。</p>
<pre><code class="hljs language-go"><span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> <span class="hljs-string">"fmt"</span>

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">uniqValue</span><span class="hljs-params">(arr []<span class="hljs-type">int</span>)</span></span> []<span class="hljs-type">int</span> {
	m := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>]<span class="hljs-type">bool</span>)
	<span class="hljs-keyword">var</span> uniq []<span class="hljs-type">int</span>

	<span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> arr {
		<span class="hljs-keyword">if</span> !m[v] {
			m[v] = <span class="hljs-literal">true</span>
			uniq = <span class="hljs-built_in">append</span>(uniq, v)
		}
	}
	<span class="hljs-keyword">return</span> uniq
}

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {
	<span class="hljs-keyword">var</span> N <span class="hljs-type">int</span>
	fmt.Scan(&#x26;N)
	arr := <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, N)

	<span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &#x3C; N; i++ {
		fmt.Scan(&#x26;arr[i])
	}

	result := uniqValue(arr)

	fmt.Println(<span class="hljs-built_in">len</span>(result))
}
</code></pre>
<h2>8問目 <a href="https://atcoder.jp/contests/abc085/tasks/abc085_c">ABC 085 C - Otoshidama</a></h2>
<p>fmt.Printf で文字列に埋め込む。</p>
<pre><code class="hljs language-go"><span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> <span class="hljs-string">"fmt"</span>

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {
	<span class="hljs-keyword">var</span> N, sum <span class="hljs-type">int</span>
	fmt.Scan(&#x26;N, &#x26;sum)
	result := [<span class="hljs-number">3</span>]<span class="hljs-type">int</span>{<span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>}

BREAK_LABEL:
	<span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &#x3C;= N; i++ {
		<span class="hljs-keyword">for</span> j := <span class="hljs-number">0</span>; j &#x3C;= N-i; j++ {
			<span class="hljs-keyword">if</span> sum == <span class="hljs-number">10000</span>*i+<span class="hljs-number">5000</span>*j+<span class="hljs-number">1000</span>*(N-i-j) {
				result[<span class="hljs-number">0</span>] = i
				result[<span class="hljs-number">1</span>] = j
				result[<span class="hljs-number">2</span>] = N - i - j
				<span class="hljs-keyword">break</span> BREAK_LABEL
			}
		}
	}
	fmt.Printf(<span class="hljs-string">"%d %d %d"</span>, result[<span class="hljs-number">0</span>], result[<span class="hljs-number">1</span>], result[<span class="hljs-number">2</span>])
}
</code></pre>
<h2>9問目 <a href="https://atcoder.jp/contests/abc049/tasks/arc065_a">ABC 049 C - Daydream</a></h2>
<pre><code class="hljs language-go"><span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> (
	<span class="hljs-string">"fmt"</span>
)

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">reverse</span><span class="hljs-params">(s <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> {
	rs := []<span class="hljs-type">rune</span>(s)
	<span class="hljs-keyword">for</span> i, j := <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(rs)<span class="hljs-number">-1</span>; i &#x3C; j; i, j = i+<span class="hljs-number">1</span>, j<span class="hljs-number">-1</span> {
		rs[i], rs[j] = rs[j], rs[i]
	}

	<span class="hljs-keyword">return</span> <span class="hljs-type">string</span>(rs)
}

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">checker</span><span class="hljs-params">(s <span class="hljs-type">string</span>, words []<span class="hljs-type">string</span>)</span></span> <span class="hljs-type">bool</span> {
	<span class="hljs-keyword">for</span> _, w := <span class="hljs-keyword">range</span> words {
		<span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(s) &#x3C; <span class="hljs-built_in">len</span>(w) {
			<span class="hljs-keyword">continue</span>
		}
		<span class="hljs-keyword">if</span> s[<span class="hljs-number">0</span>:<span class="hljs-built_in">len</span>(w)] == w {
			<span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(s) == <span class="hljs-built_in">len</span>(w) {
				<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>
			}
			<span class="hljs-keyword">return</span> checker(s[<span class="hljs-built_in">len</span>(w):], words)
		}
	}
	<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>
}

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {
	<span class="hljs-keyword">var</span> s <span class="hljs-type">string</span>
	fmt.Scan(&#x26;s)
	words := []<span class="hljs-type">string</span>{<span class="hljs-string">"dream"</span>, <span class="hljs-string">"dreamer"</span>, <span class="hljs-string">"erase"</span>, <span class="hljs-string">"eraser"</span>}

	<span class="hljs-keyword">for</span> i, _ := <span class="hljs-keyword">range</span> words {
		words[i] = reverse(words[i])
	}
	s = reverse(s)

	<span class="hljs-keyword">if</span> checker(s, words) {
		fmt.Println(<span class="hljs-string">"YES"</span>)
	} <span class="hljs-keyword">else</span> {
		fmt.Println(<span class="hljs-string">"NO"</span>)
	}
}
</code></pre>
<h2>10問目 <a href="https://atcoder.jp/contests/abc086/tasks/arc089_a">ABC 086 C - Traveling</a></h2>
<pre><code class="hljs language-go"><span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> (
	<span class="hljs-string">"fmt"</span>
	<span class="hljs-string">"math"</span>
)

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {
	<span class="hljs-keyword">var</span> N <span class="hljs-type">int</span>
	fmt.Scan(&#x26;N)
	<span class="hljs-keyword">var</span> t0 <span class="hljs-type">int</span> = <span class="hljs-number">0</span>
	<span class="hljs-keyword">var</span> t1 <span class="hljs-type">int</span>
	<span class="hljs-keyword">var</span> x0, y0 <span class="hljs-type">float64</span> = <span class="hljs-number">0</span>, <span class="hljs-number">0</span>
	<span class="hljs-keyword">var</span> x1, y1 <span class="hljs-type">float64</span>

	<span class="hljs-keyword">for</span> <span class="hljs-keyword">range</span> <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, N) {
		fmt.Scan(&#x26;t1, &#x26;x1, &#x26;y1)
		dt := t1 - t0
		dist := math.Abs(x1-x0) + math.Abs(y1-y0)

		<span class="hljs-keyword">if</span> dt &#x3C; <span class="hljs-type">int</span>(dist) || dt%<span class="hljs-number">2</span> != <span class="hljs-type">int</span>(dist)%<span class="hljs-number">2</span> {
			fmt.Println(<span class="hljs-string">"No"</span>)
			<span class="hljs-keyword">return</span>
		}

		t0, x0, y0 = t1, x1, y1
	}
	fmt.Println(<span class="hljs-string">"Yes"</span>)
}
</code></pre>
<h2>おまけ</h2>
<p>TypeScript でも解いてみた。</p>
<h3>1問目</h3>
<pre><code class="hljs language-typescript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">main</span>(<span class="hljs-params">input</span>) {
  <span class="hljs-keyword">const</span> args = input.<span class="hljs-title function_">split</span>(<span class="hljs-string">" "</span>);
  <span class="hljs-keyword">const</span> a = +args[<span class="hljs-number">0</span>];
  <span class="hljs-keyword">const</span> b = +args[<span class="hljs-number">1</span>];

  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a * b % <span class="hljs-number">2</span> === <span class="hljs-number">0</span> ? <span class="hljs-string">"Even"</span> : <span class="hljs-string">"Odd"</span>);
}

<span class="hljs-title function_">main</span>(<span class="hljs-built_in">require</span>(<span class="hljs-string">"fs"</span>).<span class="hljs-title function_">readFileSync</span>(<span class="hljs-string">"/dev/stdin"</span>, <span class="hljs-string">"utf8"</span>));
</code></pre>
<h3>2問目</h3>
<pre><code class="hljs language-typescript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">main</span>(<span class="hljs-params">input</span>) {
  <span class="hljs-keyword">const</span> s1 = +input.<span class="hljs-title function_">split</span>(<span class="hljs-string">""</span>)[<span class="hljs-number">0</span>];
  <span class="hljs-keyword">const</span> s2 = +input.<span class="hljs-title function_">split</span>(<span class="hljs-string">""</span>)[<span class="hljs-number">1</span>];
  <span class="hljs-keyword">const</span> s3 = +input.<span class="hljs-title function_">split</span>(<span class="hljs-string">""</span>)[<span class="hljs-number">2</span>];
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(s1 + s2 + s3);
}

<span class="hljs-title function_">main</span>(<span class="hljs-built_in">require</span>(<span class="hljs-string">"fs"</span>).<span class="hljs-title function_">readFileSync</span>(<span class="hljs-string">"/dev/stdin"</span>, <span class="hljs-string">"utf8"</span>));
</code></pre>
<h3>3問目</h3>
<pre><code class="hljs language-typescript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">main</span>(<span class="hljs-params">input</span>) {
  <span class="hljs-keyword">let</span> nums = input.<span class="hljs-title function_">split</span>(<span class="hljs-string">"\n"</span>)[<span class="hljs-number">1</span>].<span class="hljs-title function_">split</span>(<span class="hljs-string">" "</span>).<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">e</span>) =></span> +e);

  <span class="hljs-keyword">let</span> cnt = <span class="hljs-number">0</span>;

  <span class="hljs-keyword">while</span> (nums.<span class="hljs-title function_">every</span>(<span class="hljs-function">(<span class="hljs-params">e</span>) =></span> e % <span class="hljs-number">2</span> === <span class="hljs-number">0</span>)) {
    cnt++;
    nums = nums.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">e</span>) =></span> e / <span class="hljs-number">2</span>);
  }

  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(cnt);
}

<span class="hljs-title function_">main</span>(<span class="hljs-built_in">require</span>(<span class="hljs-string">"fs"</span>).<span class="hljs-title function_">readFileSync</span>(<span class="hljs-string">"/dev/stdin"</span>, <span class="hljs-string">"utf8"</span>));
</code></pre>
<h3>4問目</h3>
<pre><code class="hljs language-typescript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">main</span>(<span class="hljs-params">input</span>) {
  <span class="hljs-keyword">const</span> [A, B, C, X] = [
    +input.<span class="hljs-title function_">split</span>(<span class="hljs-string">"\n"</span>)[<span class="hljs-number">0</span>],
    +input.<span class="hljs-title function_">split</span>(<span class="hljs-string">"\n"</span>)[<span class="hljs-number">1</span>],
    +input.<span class="hljs-title function_">split</span>(<span class="hljs-string">"\n"</span>)[<span class="hljs-number">2</span>],
    +input.<span class="hljs-title function_">split</span>(<span class="hljs-string">"\n"</span>)[<span class="hljs-number">3</span>],
  ];

  <span class="hljs-keyword">let</span> count = <span class="hljs-number">0</span>;

  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> c = <span class="hljs-number">0</span>; c &#x3C;= C; c++) {
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> b = <span class="hljs-number">0</span>; b &#x3C;= B; b++) {
      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> a = <span class="hljs-number">0</span>; a &#x3C;= A; a++) {
        <span class="hljs-keyword">if</span> (X === <span class="hljs-number">500</span> * a + <span class="hljs-number">100</span> * b + <span class="hljs-number">50</span> * c) {
          count++;
        }
      }
    }
  }
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(count);
}

<span class="hljs-title function_">main</span>(<span class="hljs-built_in">require</span>(<span class="hljs-string">"fs"</span>).<span class="hljs-title function_">readFileSync</span>(<span class="hljs-string">"/dev/stdin"</span>, <span class="hljs-string">"utf8"</span>));
</code></pre>
<h3>5問目</h3>
<pre><code class="hljs language-typescript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">main</span>(<span class="hljs-params">input</span>) {
  <span class="hljs-keyword">const</span> n = +input.<span class="hljs-title function_">split</span>(<span class="hljs-string">" "</span>)[<span class="hljs-number">0</span>];
  <span class="hljs-keyword">const</span> a = +input.<span class="hljs-title function_">split</span>(<span class="hljs-string">" "</span>)[<span class="hljs-number">1</span>];
  <span class="hljs-keyword">const</span> b = +input.<span class="hljs-title function_">split</span>(<span class="hljs-string">" "</span>)[<span class="hljs-number">2</span>];

  <span class="hljs-keyword">let</span> result = <span class="hljs-number">0</span>;
  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &#x3C;= n; i++) {
    <span class="hljs-keyword">if</span> (a &#x3C;= <span class="hljs-title function_">sumDigists</span>(i) &#x26;&#x26; <span class="hljs-title function_">sumDigists</span>(i) &#x3C;= b) {
      result += i;
    }
  }
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result);
}

<span class="hljs-keyword">function</span> <span class="hljs-title function_">sumDigists</span>(<span class="hljs-params">n</span>) {
  <span class="hljs-keyword">let</span> sum = <span class="hljs-number">0</span>;
  <span class="hljs-keyword">if</span> (n &#x3C; <span class="hljs-number">10</span>) {
    <span class="hljs-keyword">return</span> n;
  } <span class="hljs-keyword">else</span> {
    <span class="hljs-keyword">while</span> (n > <span class="hljs-number">0</span>) {
      sum += n % <span class="hljs-number">10</span>;
      n = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(n / <span class="hljs-number">10</span>);
    }
    <span class="hljs-keyword">return</span> sum;
  }
}

<span class="hljs-title function_">main</span>(<span class="hljs-built_in">require</span>(<span class="hljs-string">"fs"</span>).<span class="hljs-title function_">readFileSync</span>(<span class="hljs-string">"/dev/stdin"</span>, <span class="hljs-string">"utf8"</span>));
</code></pre>
<h3>6問目</h3>
<pre><code class="hljs language-typescript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">main</span>(<span class="hljs-params">input</span>) {
  <span class="hljs-keyword">const</span> n = input.<span class="hljs-title function_">split</span>(<span class="hljs-string">"\n"</span>)[<span class="hljs-number">0</span>];
  <span class="hljs-keyword">const</span> a = input.<span class="hljs-title function_">split</span>(<span class="hljs-string">"\n"</span>)[<span class="hljs-number">1</span>].<span class="hljs-title function_">split</span>(<span class="hljs-string">" "</span>);
  <span class="hljs-keyword">const</span> arr = a.<span class="hljs-title function_">sort</span>(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =></span> (+b) - (+a));

  <span class="hljs-keyword">let</span> result = <span class="hljs-number">0</span>;
  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &#x3C; n; i++) {
    <span class="hljs-keyword">if</span> (i % <span class="hljs-number">2</span> === <span class="hljs-number">0</span>) {
      result += +arr[i];
    } <span class="hljs-keyword">else</span> {
      result -= +arr[i];
    }
  }
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result);
}

<span class="hljs-title function_">main</span>(<span class="hljs-built_in">require</span>(<span class="hljs-string">"fs"</span>).<span class="hljs-title function_">readFileSync</span>(<span class="hljs-string">"/dev/stdin"</span>, <span class="hljs-string">"utf8"</span>));
</code></pre>
<h3>7問目</h3>
<pre><code class="hljs language-typescript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">main</span>(<span class="hljs-params">input</span>) {
  <span class="hljs-keyword">const</span> n = input.<span class="hljs-title function_">split</span>(<span class="hljs-string">"\n"</span>)[<span class="hljs-number">0</span>];
  <span class="hljs-keyword">const</span> arr = [];
  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &#x3C;= n; i++) {
    arr.<span class="hljs-title function_">push</span>(input.<span class="hljs-title function_">split</span>(<span class="hljs-string">"\n"</span>)[i]);
  }
  <span class="hljs-keyword">const</span> set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(arr);
  <span class="hljs-keyword">const</span> result = [...set];
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result.<span class="hljs-property">length</span>);
}

<span class="hljs-title function_">main</span>(<span class="hljs-built_in">require</span>(<span class="hljs-string">"fs"</span>).<span class="hljs-title function_">readFileSync</span>(<span class="hljs-string">"/dev/stdin"</span>, <span class="hljs-string">"utf8"</span>));
</code></pre>
<h3>8問目</h3>
<pre><code class="hljs language-typescript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">main</span>(<span class="hljs-params">input</span>) {
  <span class="hljs-keyword">const</span> [n, y] = [
    input.<span class="hljs-title function_">split</span>(<span class="hljs-string">" "</span>)[<span class="hljs-number">0</span>],
    input.<span class="hljs-title function_">split</span>(<span class="hljs-string">" "</span>)[<span class="hljs-number">1</span>],
  ];

  <span class="hljs-keyword">let</span> result = <span class="hljs-string">"-1 -1 -1"</span>;
  <span class="hljs-attr">BREAK_LABEL</span>:
  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &#x3C;= n; i++) {
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; j &#x3C;= (n - i); j++) {
      <span class="hljs-keyword">if</span> (+y === <span class="hljs-number">10000</span> * i + <span class="hljs-number">5000</span> * j + <span class="hljs-number">1000</span> * (n - i - j)) {
        result = <span class="hljs-string">`<span class="hljs-subst">${i}</span> <span class="hljs-subst">${j}</span> <span class="hljs-subst">${n - i - j}</span>`</span>;
        <span class="hljs-keyword">break</span> <span class="hljs-variable constant_">BREAK_LABEL</span>;
      }
    }
  }
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result);
}

<span class="hljs-title function_">main</span>(<span class="hljs-built_in">require</span>(<span class="hljs-string">"fs"</span>).<span class="hljs-title function_">readFileSync</span>(<span class="hljs-string">"/dev/stdin"</span>, <span class="hljs-string">"utf8"</span>));
</code></pre>
<h3>9問目</h3>
<pre><code class="hljs language-typescript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">main</span>(<span class="hljs-params">input</span>) {
  <span class="hljs-keyword">let</span> s = input.<span class="hljs-title function_">replace</span>(<span class="hljs-string">"\n"</span>, <span class="hljs-string">""</span>).<span class="hljs-title function_">split</span>(<span class="hljs-string">""</span>).<span class="hljs-title function_">reverse</span>().<span class="hljs-title function_">join</span>(<span class="hljs-string">""</span>);
  <span class="hljs-keyword">let</span> flg = <span class="hljs-literal">true</span>;
  <span class="hljs-comment">// dream dreamer erase eraser</span>

  <span class="hljs-keyword">while</span> (flg) {
    <span class="hljs-keyword">if</span> (s.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>, <span class="hljs-number">7</span>) === <span class="hljs-string">"dreamer"</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">""</span>).<span class="hljs-title function_">reverse</span>().<span class="hljs-title function_">join</span>(<span class="hljs-string">""</span>)) {
      s = s.<span class="hljs-title function_">slice</span>(<span class="hljs-number">7</span>);
    } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>, <span class="hljs-number">6</span>) === <span class="hljs-string">"eraser"</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">""</span>).<span class="hljs-title function_">reverse</span>().<span class="hljs-title function_">join</span>(<span class="hljs-string">""</span>)) {
      s = s.<span class="hljs-title function_">slice</span>(<span class="hljs-number">6</span>);
    } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>, <span class="hljs-number">5</span>) === <span class="hljs-string">"erase"</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">""</span>).<span class="hljs-title function_">reverse</span>().<span class="hljs-title function_">join</span>(<span class="hljs-string">""</span>)) {
      s = s.<span class="hljs-title function_">slice</span>(<span class="hljs-number">5</span>);
    } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>, <span class="hljs-number">5</span>) === <span class="hljs-string">"dream"</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">""</span>).<span class="hljs-title function_">reverse</span>().<span class="hljs-title function_">join</span>(<span class="hljs-string">""</span>)) {
      s = s.<span class="hljs-title function_">slice</span>(<span class="hljs-number">5</span>);
    } <span class="hljs-keyword">else</span> {
      flg = <span class="hljs-literal">false</span>;
    }
  }
  <span class="hljs-keyword">if</span> (s === <span class="hljs-string">""</span>) {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">"YES"</span>);
  } <span class="hljs-keyword">else</span> {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">"NO"</span>);
  }
}

<span class="hljs-title function_">main</span>(<span class="hljs-built_in">require</span>(<span class="hljs-string">"fs"</span>).<span class="hljs-title function_">readFileSync</span>(<span class="hljs-string">"/dev/stdin"</span>, <span class="hljs-string">"utf8"</span>));
</code></pre>
<h3>10問目</h3>
<pre><code class="hljs language-typescript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">main</span>(<span class="hljs-params">input</span>) {
  <span class="hljs-keyword">const</span> n = +input.<span class="hljs-title function_">split</span>(<span class="hljs-string">"\n"</span>)[<span class="hljs-number">0</span>];
  <span class="hljs-keyword">let</span> t0 = <span class="hljs-number">0</span>;
  <span class="hljs-keyword">let</span> x0 = <span class="hljs-number">0</span>;
  <span class="hljs-keyword">let</span> y0 = <span class="hljs-number">0</span>;

  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &#x3C;= n; i++) {
    <span class="hljs-keyword">let</span> e = input.<span class="hljs-title function_">split</span>(<span class="hljs-string">"\n"</span>)[i];
    <span class="hljs-keyword">let</span> t1 = +e.<span class="hljs-title function_">split</span>(<span class="hljs-string">" "</span>)[<span class="hljs-number">0</span>];
    <span class="hljs-keyword">let</span> x1 = +e.<span class="hljs-title function_">split</span>(<span class="hljs-string">" "</span>)[<span class="hljs-number">1</span>];
    <span class="hljs-keyword">let</span> y1 = +e.<span class="hljs-title function_">split</span>(<span class="hljs-string">" "</span>)[<span class="hljs-number">2</span>];

    <span class="hljs-keyword">let</span> dt = t1 - t0;
    <span class="hljs-keyword">let</span> dist = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">abs</span>(x1 - x0) + <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">abs</span>(y1 - y0);

    <span class="hljs-keyword">if</span> (dt &#x3C; dist || dt % <span class="hljs-number">2</span> != dist % <span class="hljs-number">2</span>) {
      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">"No"</span>);
      <span class="hljs-keyword">return</span>;
    }
    [t0, x0, y0] = [t1, x1, y1];
  }
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">"Yes"</span>);
}

<span class="hljs-title function_">main</span>(<span class="hljs-built_in">require</span>(<span class="hljs-string">"fs"</span>).<span class="hljs-title function_">readFileSync</span>(<span class="hljs-string">"/dev/stdin"</span>, <span class="hljs-string">"utf8"</span>));
</code></pre>5:["$","article",null,{"style":{"maxWidth":"1000px","margin":"0 auto","padding":"0 2rem 2rem"},"children":[["$","h1",null,{"children":"atcorder過去問精鋭10問をGolangで解いた"}],["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$10"}}]]}]
b:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
7:null
9:{"metadata":[["$","title","0",{"children":"MyDocs"}],["$","meta","1",{"name":"description","content":"A simple SSG blog built with Next.js"}]],"error":null,"digest":"$undefined"}
e:"$9:metadata"
