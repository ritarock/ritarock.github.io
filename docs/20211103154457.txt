1:"$Sreact.fragment"
2:I[9119,["119","static/chunks/119-2ee48d1f375d3fd9.js","974","static/chunks/app/page-ee49d1414c09869d.js"],""]
3:I[730,[],""]
4:I[2392,[],""]
6:I[3811,[],"OutletBoundary"]
8:I[4338,[],"AsyncMetadataOutlet"]
a:I[3811,[],"ViewportBoundary"]
c:I[3811,[],"MetadataBoundary"]
d:"$Sreact.suspense"
f:I[9426,[],""]
:HL["/_next/static/css/5e22d3fe14facb50.css","style"]
0:{"P":null,"b":"OVt0H6to9QSgb-YS8ef-u","p":"","c":["","docs","20211103154457"],"i":false,"f":[[["",{"children":["docs",{"children":[["slug","20211103154457","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/5e22d3fe14facb50.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"ja","children":["$","body",null,{"style":{"backgroundColor":"ghostwhite","margin":0,"minHeight":"100vh"},"children":[["$","header",null,{"style":{"padding":"1rem 0","marginBottom":"0.25rem"},"children":["$","div",null,{"style":{"maxWidth":"1000px","margin":"0 auto","padding":"0 2rem"},"children":["$","$L2",null,{"href":"/","style":{"fontSize":"1.5rem","fontWeight":"bold","textDecoration":"none","color":"#333"},"children":"MyDocs"}]}]}],["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]]}]}]]}],{"children":["docs",["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["slug","20211103154457","d"],["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L5",null,["$","$L6",null,{"children":["$L7",["$","$L8",null,{"promise":"$@9"}]]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,[["$","$La",null,{"children":"$Lb"}],null],["$","$Lc",null,{"children":["$","div",null,{"hidden":true,"children":["$","$d",null,{"fallback":null,"children":"$Le"}]}]}]]}],false]],"m":"$undefined","G":["$f",[]],"s":false,"S":true}
10:T1bfe,<h2>context パッケージ</h2>
<p>context パッケージを見てみる。</p>
<pre><code class="hljs language-go"><span class="hljs-keyword">type</span> Context <span class="hljs-keyword">interface</span> {
	Deadline() (deadline time.Time, ok <span class="hljs-type">bool</span>)
	Done() &#x3C;-<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>{}
	Err() <span class="hljs-type">error</span>
	Value(key <span class="hljs-keyword">interface</span>{}) <span class="hljs-keyword">interface</span>{}
}
</code></pre>
<p>context パッケージのざっくりとした目的は以下の通り。</p>
<ul>
<li>適切なキャンセルを行う機能を提供する</li>
<li>リクエストのデータの置き場を提供する</li>
</ul>
<p>キャンセルには 3 つ側面がある。</p>
<ul>
<li>ゴルーチンの親がキャンセルしたい場合</li>
<li>ゴルーチンの子をキャンセルしたい場合</li>
<li>ゴルーチン内のブロックしている処理がキャンセルされるように中断できる必要がある場合</li>
</ul>
<h2>使い方</h2>
<p>Context の空インスタンスを作る関数は以下の 2 つ。</p>
<ul>
<li><code>func Background() Context</code>
<ul>
<li>通常使うのはこっち。空の Context を返す</li>
</ul>
</li>
<li><code>func TODO() Context</code>
<ul>
<li>本番環境で使われることを想定していない。どの Context を使っていいかわからないとき、もしくは上流の実装が終わっていないときに使う</li>
</ul>
</li>
</ul>
<h3>Done / Deadline メソッド</h3>
<p>キャンセルに使う。</p>
<ul>
<li><code>context.WithCancel</code></li>
</ul>
<pre><code class="hljs language-go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">context</span>.<span class="hljs-title">WithCancel</span><span class="hljs-params">(parent context.Context)</span></span> (ctx context.Context, cancel context.CancelFunc)
</code></pre>
<p>キャンセルする側は <code>context.WithCancel()</code> によって生成された cancal 関数を実行する.
そのタイミングで、キャンセルされる側の context の Done メソッドが close される。</p>
<pre><code class="hljs language-go">ctx, cancel := context.WithCancel(context.Background())
<span class="hljs-comment">// 処理</span>
cancel()
</code></pre>
<p>キャンセルされる側は <code>ctx.Done()</code> からキャンセルを受け取る。</p>
<pre><code class="hljs language-go">&#x3C;-ctx.Done()
</code></pre>
<ul>
<li><code>context.WithDeadline</code></li>
</ul>
<pre><code class="hljs language-go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">context</span>.<span class="hljs-title">WithDeadline</span><span class="hljs-params">(parent context.Context, d time.Time)</span></span> (context.Context, context.CancelFunc)
</code></pre>
<p>キャンセルする側は <code>context.WithDeadline</code> の生成時に停止したい時刻を設定することでその時刻を超えたタイミングでキャンセルが実行される。</p>
<pre><code class="hljs language-go">ctx, cancel := context.WithDeadline(context.Background(), time.Now().Add(time.Second))
</code></pre>
<ul>
<li><code>context.Timeout</code></li>
</ul>
<pre><code class="hljs language-go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">context</span>.<span class="hljs-title">WithTimeout</span><span class="hljs-params">(parent context.Context, timeout time.Duration)</span></span> (context.Context, context.CancelFunc)
</code></pre>
<p>キャンセルする側は <code>context.Timeout</code> の生成時に停止したい時間は設定することでその時間を超えたタイミングでキャンセルが実行される。</p>
<pre><code class="hljs language-go">ctx, cancel := context.WithTimeout(context.Background(), time.Second)
</code></pre>
<p><code>ctx.WithDeadline</code> 、 <code>ctx.Timeout</code> を使ったキャンセルされる側は <code>ctx.WithCancel</code> と同様に <code>ctx.Done()</code> からキャンセルを受け取る。
context 生成時に得られる canacl は close されたチャネルには何も実行されないので、タイムアウトの処理をしていても明示的に cancel は呼ぶほうが良い。</p>
<p>context に対してタイムアウトが設定されているかどうかを確認するには、 context の <code>Deadline</code> メソッドを実行する。</p>
<pre><code class="hljs language-go"><span class="hljs-keyword">type</span> Context <span class="hljs-keyword">interface</span> {
	Deadline() (deadline time.Time, ok <span class="hljs-type">bool</span>)
}
</code></pre>
<p>設定されている場合、第 2 返り値は true で第 1 返り値にはその時刻が設定されている。</p>
<h3>Err メソッド</h3>
<pre><code class="hljs language-go"><span class="hljs-keyword">type</span> Context <span class="hljs-keyword">interface</span> {
	Err() <span class="hljs-type">error</span>
}
</code></pre>
<ul>
<li>context がキャンセルされていない場合は <code>nil</code></li>
<li>context が明示的にキャンセルされている場合は <code>Canceled</code></li>
<li>context がタイムアウトしていた場合は <code>DeadlineExceeded</code></li>
</ul>
<pre><code class="hljs language-go">LOOP:
	<span class="hljs-keyword">for</span> {
		<span class="hljs-keyword">select</span> {
		<span class="hljs-keyword">case</span> &#x3C;-ctx.Done():
			<span class="hljs-keyword">if</span> err := ctx.Err(); errors.Is(err, context.Canceled) {
				fmt.Println(<span class="hljs-string">"Canceled"</span>)
			} <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> errors.Is(err, context.DeadlineExceeded) {
				fmt.Println(<span class="hljs-string">"DeadlineExceeded"</span>)
			}
			<span class="hljs-keyword">break</span> LOOP
		}
	}
</code></pre>
<h3>Value メソッド</h3>
<pre><code class="hljs language-go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">context</span>.<span class="hljs-title">WithValue</span><span class="hljs-params">(parent context.Context, key <span class="hljs-keyword">interface</span>{}, val <span class="hljs-keyword">interface</span>{})</span></span> context.Context
</code></pre>
<p><code>WithValue</code> を使うと context に key-value 形式でデータを保持できる。</p>
<pre><code class="hljs language-go">ctx, cancel := context.WithCancel(context.Background())
ctx = context.WithValue(ctx, <span class="hljs-string">"id"</span>, <span class="hljs-number">1</span>)
ctx = context.WithValue(ctx, <span class="hljs-string">"user"</span>, <span class="hljs-string">"abc"</span>)
</code></pre>
<p>取り出すときはアサーションして値を取り出す。</p>
<pre><code class="hljs language-go">id, user := ctx.Value(<span class="hljs-string">"id"</span>).(<span class="hljs-type">int</span>), ctx.Value(<span class="hljs-string">"user"</span>).(<span class="hljs-type">string</span>)
</code></pre>5:["$","article",null,{"style":{"maxWidth":"1000px","margin":"0 auto","padding":"0 2rem 2rem"},"children":[["$","h1",null,{"children":"Goのcontext"}],["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$10"}}]]}]
b:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
7:null
9:{"metadata":[["$","title","0",{"children":"MyDocs"}],["$","meta","1",{"name":"description","content":"A simple SSG blog built with Next.js"}]],"error":null,"digest":"$undefined"}
e:"$9:metadata"
