1:"$Sreact.fragment"
2:I[9119,["119","static/chunks/119-2ee48d1f375d3fd9.js","974","static/chunks/app/page-ee49d1414c09869d.js"],""]
3:I[730,[],""]
4:I[2392,[],""]
6:I[3811,[],"OutletBoundary"]
8:I[4338,[],"AsyncMetadataOutlet"]
a:I[3811,[],"ViewportBoundary"]
c:I[3811,[],"MetadataBoundary"]
d:"$Sreact.suspense"
f:I[9426,[],""]
:HL["/_next/static/css/5e22d3fe14facb50.css","style"]
0:{"P":null,"b":"nvFx_FV4eLnf8EmFzYlmi","p":"","c":["","docs","20210723021243"],"i":false,"f":[[["",{"children":["docs",{"children":[["slug","20210723021243","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/5e22d3fe14facb50.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"ja","children":["$","body",null,{"style":{"backgroundColor":"ghostwhite","margin":0,"minHeight":"100vh"},"children":[["$","header",null,{"style":{"padding":"1rem 0","marginBottom":"0.25rem"},"children":["$","div",null,{"style":{"maxWidth":"1000px","margin":"0 auto","padding":"0 2rem"},"children":["$","$L2",null,{"href":"/","style":{"fontSize":"1.5rem","fontWeight":"bold","textDecoration":"none","color":"#333"},"children":"MyDocs"}]}]}],["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]]}]}]]}],{"children":["docs",["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["slug","20210723021243","d"],["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L5",null,["$","$L6",null,{"children":["$L7",["$","$L8",null,{"promise":"$@9"}]]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,[["$","$La",null,{"children":"$Lb"}],null],["$","$Lc",null,{"children":["$","div",null,{"hidden":true,"children":["$","$d",null,{"fallback":null,"children":"$Le"}]}]}]]}],false]],"m":"$undefined","G":["$f",[]],"s":false,"S":true}
10:T2e6e,<h2>サーバ</h2>
<p>何もしないサーバを起動。</p>
<pre><code class="hljs language-go"><span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> <span class="hljs-string">"net/http"</span>

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {
	http.ListenAndServe(<span class="hljs-string">""</span>, <span class="hljs-literal">nil</span>)
}
</code></pre>
<p><code>ListenAndServe</code> はネットワークアドレスとハンドラを引数で受け取る。ハンドラが nil の場合は <code>DefaultServerMux</code> が使われる。</p>
<p>Server の構造体はこんな感じ。</p>
<pre><code class="hljs language-go"><span class="hljs-keyword">type</span> Server <span class="hljs-keyword">struct</span> {
	Addr <span class="hljs-type">string</span>
	Handler Handler
	TLSConfig *tls.Config
	ReadTimeout time.Duration
	ReadHeaderTimeout time.Duration
	WriteTimeout time.Duration
	IdleTimeout time.Duration
	MaxHeaderBytes <span class="hljs-type">int</span>
	TLSNextProto <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(*Server, *tls.Conn, Handler)</span></span>
	ConnState <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(net.Conn, ConnState)</span></span>
	ErrorLog *log.Logger
	BaseContext <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(net.Listener)</span></span> context.Context
	ConnContext <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(ctx context.Context, c net.Conn)</span></span> context.Context
	inShutdown atomicBool
	disableKeepAlives <span class="hljs-type">int32</span>
	nextProtoOnce     sync.Once
	nextProtoErr      <span class="hljs-type">error</span>
	mu         sync.Mutex
	listeners  <span class="hljs-keyword">map</span>[*net.Listener]<span class="hljs-keyword">struct</span>{}
	activeConn <span class="hljs-keyword">map</span>[*conn]<span class="hljs-keyword">struct</span>{}
	doneChan   <span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>{}
	onShutdown []<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span>
}
</code></pre>
<p>設定を変更する場合は Server の構造体に値を指定する。</p>
<pre><code class="hljs language-go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {
	server := http.Server{
		Addr:    <span class="hljs-string">"0.0.0.0:8080"</span>,
		Handler: <span class="hljs-literal">nil</span>,
	}
	server.ListenAndServe()
</code></pre>
<h3>ハンドラとハンドラ関数</h3>
<p>ハンドラがない場合すべてのリクエストで 404 を返す。</p>
<p>ハンドラとは、 <code>ServerHTTP メソッド</code> を持ったインターフェースのことを指す。
このメソッドは、 <code>インターフェース HTTPResponseWriter</code> と <code>構造体 Request のポインタ</code> の 2 つの引数を取る。
つまり、 <code>ServerHTTP(http.ResponseWriter, *http.Request)</code> をもつインターフェースがハンドラになる。</p>
<pre><code class="hljs language-go"><span class="hljs-keyword">type</span> HelloHandler <span class="hljs-keyword">struct</span>{}

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(h *HelloHandler)</span></span> ServeHTTP(writer http.ResponseWriter, request *http.Request) {
	fmt.Fprintf(writer, <span class="hljs-string">"hello"</span>)
}

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {
	helloHandler := <span class="hljs-built_in">new</span>(HelloHandler)
	server := http.Server{
		Addr:    <span class="hljs-string">"0.0.0.0:8080"</span>,
		Handler: helloHandler,
	}
	server.ListenAndServe()
}
</code></pre>
<p>この状態だと、すべてのアクセスが 1 つのハンドラに行く。</p>
<p>実際は URL ごとに異なるハンドラで処理する必要があるため Handler フィールドに値を指定しない ( デフォルトで DefaultServerMux を使う ) 。</p>
<pre><code class="hljs language-go"><span class="hljs-keyword">type</span> HelloHandler <span class="hljs-keyword">struct</span>{}
<span class="hljs-keyword">type</span> WorldHandler <span class="hljs-keyword">struct</span>{}

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(h *HelloHandler)</span></span> ServeHTTP(writer http.ResponseWriter, request *http.Request) {
	fmt.Fprintf(writer, <span class="hljs-string">"hello"</span>)
}
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(w *WorldHandler)</span></span> ServeHTTP(writer http.ResponseWriter, request *http.Request) {
	fmt.Fprintf(writer, <span class="hljs-string">"world"</span>)
}

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {
	helloHandler := <span class="hljs-built_in">new</span>(HelloHandler)
	worldHandler := <span class="hljs-built_in">new</span>(WorldHandler)
	server := http.Server{
		Addr: <span class="hljs-string">"0.0.0.0:8080"</span>,
	}
	http.Handle(<span class="hljs-string">"/hello"</span>, helloHandler)
	http.Handle(<span class="hljs-string">"/world"</span>, worldHandler)
	server.ListenAndServe()
}
</code></pre>
<p><code>http.Handle</code> は実際には DefaultServeMux の Handle メソッドを呼び出している。</p>
<pre><code class="hljs language-go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Handle</span><span class="hljs-params">(pattern <span class="hljs-type">string</span>, handler Handler)</span></span> { DefaultServeMux.Handle(pattern, handler) }
</code></pre>
<p>ハンドラとは、 <code>ServerHTTP(http.ResponseWriter, *http.Request)</code> をもつインターフェースのこと。
ハンドラ関数とは、ハンドラのように振る舞う関数。リクエストのポインタを受け取ることができる。</p>
<pre><code class="hljs language-go"><span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> (
	<span class="hljs-string">"fmt"</span>
	<span class="hljs-string">"net/http"</span>
)

<span class="hljs-keyword">type</span> HelloHandler <span class="hljs-keyword">struct</span>{}
<span class="hljs-keyword">type</span> WorldHandler <span class="hljs-keyword">struct</span>{}

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(h *HelloHandler)</span></span> ServeHTTP(writer http.ResponseWriter, request *http.Request) {
	fmt.Fprintf(writer, <span class="hljs-string">"hello"</span>)
}
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(w *WorldHandler)</span></span> ServeHTTP(writer http.ResponseWriter, request *http.Request) {
	fmt.Fprintf(writer, <span class="hljs-string">"world"</span>)
}

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">hello</span><span class="hljs-params">(writer http.ResponseWriter, request *http.Request)</span></span> {
	fmt.Fprintf(writer, <span class="hljs-string">"hello"</span>)
}
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">world</span><span class="hljs-params">(writer http.ResponseWriter, request *http.Request)</span></span> {
	fmt.Fprintf(writer, <span class="hljs-string">"world"</span>)
}

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {
	helloHandler := <span class="hljs-built_in">new</span>(HelloHandler)
	worldHandler := <span class="hljs-built_in">new</span>(WorldHandler)
	server := http.Server{
		Addr: <span class="hljs-string">"0.0.0.0:8080"</span>,
	}
	http.Handle(<span class="hljs-string">"/hello"</span>, helloHandler)
	http.Handle(<span class="hljs-string">"/world"</span>, worldHandler)
	http.HandleFunc(<span class="hljs-string">"/hello2"</span>, hello)
	http.HandleFunc(<span class="hljs-string">"/world2"</span>, world)
	server.ListenAndServe()
}
</code></pre>
<h3>何が違うのか</h3>
<p>やってることは <code>DefaultServeMux.Handle(pattern, handler)</code> なので同じ。
既存のインターフェースがある場合は、 <code>ServeHTTP</code> メソッドを追加するだけでハンドラになるからそういった場合は、 <code>http.Handle</code> のほうが手軽。</p>
<pre><code class="hljs language-go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Handle</span><span class="hljs-params">(pattern <span class="hljs-type">string</span>, handler Handler)</span></span> { DefaultServeMux.Handle(pattern, handler) }

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">HandleFunc</span><span class="hljs-params">(pattern <span class="hljs-type">string</span>, handler <span class="hljs-keyword">func</span>(ResponseWriter, *Request)</span></span>) {
	DefaultServeMux.HandleFunc(pattern, handler)
}

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(mux *ServeMux)</span></span> HandleFunc(pattern <span class="hljs-type">string</span>, handler <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(ResponseWriter, *Request)</span></span>) {
	<span class="hljs-keyword">if</span> handler == <span class="hljs-literal">nil</span> {
		<span class="hljs-built_in">panic</span>(<span class="hljs-string">"http: nil handler"</span>)
	}
	mux.Handle(pattern, HandlerFunc(handler))
}
</code></pre>
<h2>サードパーティー製のマルチプレクサ</h2>
<p>標準でも特に辛くない。 <code>request.Method</code> でメソッドも取得できるのでかなり使い勝手もいい。</p>
<pre><code class="hljs language-go">mux.HandleFunc(<span class="hljs-string">"/users/create"</span>, createUsers)
mux.HandleFunc(<span class="hljs-string">"/users/read/"</span>, readUsers)
mux.HandleFunc(<span class="hljs-string">"/users/update/"</span>, updateUsers)
mux.HandleFunc(<span class="hljs-string">"/users/delete/"</span>, deleteUsers)

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">readerUsers</span><span class="hljs-params">(writer http.ResponseWriter, request *http.Request)</span></span> {
	sub := strings.TrimPrefix(request.URL.Path, <span class="hljs-string">"/users/read/"</span>)
	userId, err := strconv.Atoi(sub) <span class="hljs-comment">// これで /users/read/:id の id を取得できる</span>
}
</code></pre>
<p>下記のような、 <code>/users/:user_id/tasks/:task_id</code> みたいに解析を結構頑張らないといけない場合は結構辛い。</p>
<pre><code class="hljs language-go">mux.HandleFunc(<span class="hljs-string">"/users/2/tasks/create"</span>, createUsers)
mux.HandleFunc(<span class="hljs-string">"/users/2/tasks/read/"</span>, readUsers)
mux.HandleFunc(<span class="hljs-string">"/users/2/tasks/update/"</span>, updateUsers)
mux.HandleFunc(<span class="hljs-string">"/users/2/tasks/delete/"</span>, deleteUsers)
</code></pre>
<p>この辺が良さそう。</p>
<ul>
<li><a href="https://github.com/gorilla/mux">https://github.com/gorilla/mux</a></li>
<li><a href="https://github.com/julienschmidt/httprouter">https://github.com/julienschmidt/httprouter</a></li>
</ul>5:["$","article",null,{"style":{"maxWidth":"1000px","margin":"0 auto","padding":"0 2rem 2rem"},"children":[["$","h1",null,{"children":"Golangのhttp/netについて調べた"}],["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$10"}}]]}]
b:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
7:null
9:{"metadata":[["$","title","0",{"children":"MyDocs"}],["$","meta","1",{"name":"description","content":"A simple SSG blog built with Next.js"}]],"error":null,"digest":"$undefined"}
e:"$9:metadata"
